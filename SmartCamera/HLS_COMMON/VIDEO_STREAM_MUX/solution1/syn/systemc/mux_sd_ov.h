// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mux_sd_ov_HH_
#define _mux_sd_ov_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mux_sd_ov_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct mux_sd_ov : public sc_module {
    // Port declarations 32
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > data_in_sd_V_V_TDATA;
    sc_in< sc_logic > data_in_sd_V_V_TVALID;
    sc_out< sc_logic > data_in_sd_V_V_TREADY;
    sc_in< sc_lv<8> > data_in_ov7670_V_V_TDATA;
    sc_in< sc_logic > data_in_ov7670_V_V_TVALID;
    sc_out< sc_logic > data_in_ov7670_V_V_TREADY;
    sc_out< sc_lv<8> > outputStream_V_V_TDATA;
    sc_out< sc_logic > outputStream_V_V_TVALID;
    sc_in< sc_logic > outputStream_V_V_TREADY;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mux_sd_ov(sc_module_name name);
    SC_HAS_PROCESS(mux_sd_ov);

    ~mux_sd_ov();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mux_sd_ov_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* mux_sd_ov_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > switch_stream;
    sc_signal< sc_lv<8> > data_in_sd_V_V_0_data_out;
    sc_signal< sc_logic > data_in_sd_V_V_0_vld_in;
    sc_signal< sc_logic > data_in_sd_V_V_0_vld_out;
    sc_signal< sc_logic > data_in_sd_V_V_0_ack_in;
    sc_signal< sc_logic > data_in_sd_V_V_0_ack_out;
    sc_signal< sc_lv<8> > data_in_sd_V_V_0_payload_A;
    sc_signal< sc_lv<8> > data_in_sd_V_V_0_payload_B;
    sc_signal< sc_logic > data_in_sd_V_V_0_sel_rd;
    sc_signal< sc_logic > data_in_sd_V_V_0_sel_wr;
    sc_signal< sc_logic > data_in_sd_V_V_0_sel;
    sc_signal< sc_logic > data_in_sd_V_V_0_load_A;
    sc_signal< sc_logic > data_in_sd_V_V_0_load_B;
    sc_signal< sc_lv<2> > data_in_sd_V_V_0_state;
    sc_signal< sc_logic > data_in_sd_V_V_0_state_cmp_full;
    sc_signal< sc_lv<8> > data_in_ov7670_V_V_0_data_out;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_vld_in;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_vld_out;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_ack_in;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_ack_out;
    sc_signal< sc_lv<8> > data_in_ov7670_V_V_0_payload_A;
    sc_signal< sc_lv<8> > data_in_ov7670_V_V_0_payload_B;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_sel_rd;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_sel_wr;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_sel;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_load_A;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_load_B;
    sc_signal< sc_lv<2> > data_in_ov7670_V_V_0_state;
    sc_signal< sc_logic > data_in_ov7670_V_V_0_state_cmp_full;
    sc_signal< sc_lv<8> > outputStream_V_V_1_data_in;
    sc_signal< sc_lv<8> > outputStream_V_V_1_data_out;
    sc_signal< sc_logic > outputStream_V_V_1_vld_in;
    sc_signal< sc_logic > outputStream_V_V_1_vld_out;
    sc_signal< sc_logic > outputStream_V_V_1_ack_in;
    sc_signal< sc_logic > outputStream_V_V_1_ack_out;
    sc_signal< sc_lv<8> > outputStream_V_V_1_payload_A;
    sc_signal< sc_lv<8> > outputStream_V_V_1_payload_B;
    sc_signal< sc_logic > outputStream_V_V_1_sel_rd;
    sc_signal< sc_logic > outputStream_V_V_1_sel_wr;
    sc_signal< sc_logic > outputStream_V_V_1_sel;
    sc_signal< sc_logic > outputStream_V_V_1_load_A;
    sc_signal< sc_logic > outputStream_V_V_1_load_B;
    sc_signal< sc_lv<2> > outputStream_V_V_1_state;
    sc_signal< sc_logic > outputStream_V_V_1_state_cmp_full;
    sc_signal< sc_logic > data_in_sd_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > data_in_ov7670_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > outputStream_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > switch_stream_read_reg_61;
    sc_signal< sc_lv<1> > switch_stream_read_read_fu_34_p2;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const int C_S_AXI_DATA_WIDTH;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state3_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_data_in_ov7670_V_V_0_ack_in();
    void thread_data_in_ov7670_V_V_0_ack_out();
    void thread_data_in_ov7670_V_V_0_data_out();
    void thread_data_in_ov7670_V_V_0_load_A();
    void thread_data_in_ov7670_V_V_0_load_B();
    void thread_data_in_ov7670_V_V_0_sel();
    void thread_data_in_ov7670_V_V_0_state_cmp_full();
    void thread_data_in_ov7670_V_V_0_vld_in();
    void thread_data_in_ov7670_V_V_0_vld_out();
    void thread_data_in_ov7670_V_V_TDATA_blk_n();
    void thread_data_in_ov7670_V_V_TREADY();
    void thread_data_in_sd_V_V_0_ack_in();
    void thread_data_in_sd_V_V_0_ack_out();
    void thread_data_in_sd_V_V_0_data_out();
    void thread_data_in_sd_V_V_0_load_A();
    void thread_data_in_sd_V_V_0_load_B();
    void thread_data_in_sd_V_V_0_sel();
    void thread_data_in_sd_V_V_0_state_cmp_full();
    void thread_data_in_sd_V_V_0_vld_in();
    void thread_data_in_sd_V_V_0_vld_out();
    void thread_data_in_sd_V_V_TDATA_blk_n();
    void thread_data_in_sd_V_V_TREADY();
    void thread_outputStream_V_V_1_ack_in();
    void thread_outputStream_V_V_1_ack_out();
    void thread_outputStream_V_V_1_data_in();
    void thread_outputStream_V_V_1_data_out();
    void thread_outputStream_V_V_1_load_A();
    void thread_outputStream_V_V_1_load_B();
    void thread_outputStream_V_V_1_sel();
    void thread_outputStream_V_V_1_state_cmp_full();
    void thread_outputStream_V_V_1_vld_in();
    void thread_outputStream_V_V_1_vld_out();
    void thread_outputStream_V_V_TDATA();
    void thread_outputStream_V_V_TDATA_blk_n();
    void thread_outputStream_V_V_TVALID();
    void thread_switch_stream_read_read_fu_34_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
