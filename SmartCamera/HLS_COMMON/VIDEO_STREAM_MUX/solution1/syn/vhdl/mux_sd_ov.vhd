-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mux_sd_ov is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_sd_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_sd_V_V_TVALID : IN STD_LOGIC;
    data_in_sd_V_V_TREADY : OUT STD_LOGIC;
    data_in_ov7670_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_ov7670_V_V_TVALID : IN STD_LOGIC;
    data_in_ov7670_V_V_TREADY : OUT STD_LOGIC;
    outputStream_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outputStream_V_V_TVALID : OUT STD_LOGIC;
    outputStream_V_V_TREADY : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of mux_sd_ov is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mux_sd_ov,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=221}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal switch_stream : STD_LOGIC;
    signal data_in_sd_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_sd_V_V_0_vld_in : STD_LOGIC;
    signal data_in_sd_V_V_0_vld_out : STD_LOGIC;
    signal data_in_sd_V_V_0_ack_in : STD_LOGIC;
    signal data_in_sd_V_V_0_ack_out : STD_LOGIC;
    signal data_in_sd_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_sd_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_sd_V_V_0_sel_rd : STD_LOGIC := '0';
    signal data_in_sd_V_V_0_sel_wr : STD_LOGIC := '0';
    signal data_in_sd_V_V_0_sel : STD_LOGIC;
    signal data_in_sd_V_V_0_load_A : STD_LOGIC;
    signal data_in_sd_V_V_0_load_B : STD_LOGIC;
    signal data_in_sd_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_in_sd_V_V_0_state_cmp_full : STD_LOGIC;
    signal data_in_ov7670_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_ov7670_V_V_0_vld_in : STD_LOGIC;
    signal data_in_ov7670_V_V_0_vld_out : STD_LOGIC;
    signal data_in_ov7670_V_V_0_ack_in : STD_LOGIC;
    signal data_in_ov7670_V_V_0_ack_out : STD_LOGIC;
    signal data_in_ov7670_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_ov7670_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_ov7670_V_V_0_sel_rd : STD_LOGIC := '0';
    signal data_in_ov7670_V_V_0_sel_wr : STD_LOGIC := '0';
    signal data_in_ov7670_V_V_0_sel : STD_LOGIC;
    signal data_in_ov7670_V_V_0_load_A : STD_LOGIC;
    signal data_in_ov7670_V_V_0_load_B : STD_LOGIC;
    signal data_in_ov7670_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_in_ov7670_V_V_0_state_cmp_full : STD_LOGIC;
    signal outputStream_V_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outputStream_V_V_1_sel : STD_LOGIC;
    signal outputStream_V_V_1_load_A : STD_LOGIC;
    signal outputStream_V_V_1_load_B : STD_LOGIC;
    signal outputStream_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_V_1_state_cmp_full : STD_LOGIC;
    signal data_in_sd_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal data_in_ov7670_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal outputStream_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal switch_stream_read_reg_61 : STD_LOGIC_VECTOR (0 downto 0);
    signal switch_stream_read_read_fu_34_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component mux_sd_ov_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        switch_stream : OUT STD_LOGIC );
    end component;



begin
    mux_sd_ov_AXILiteS_s_axi_U : component mux_sd_ov_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        switch_stream => switch_stream);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    data_in_ov7670_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_ov7670_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((data_in_ov7670_V_V_0_ack_out = ap_const_logic_1) and (data_in_ov7670_V_V_0_vld_out = ap_const_logic_1))) then 
                                        data_in_ov7670_V_V_0_sel_rd <= not(data_in_ov7670_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_in_ov7670_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_ov7670_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((data_in_ov7670_V_V_0_ack_in = ap_const_logic_1) and (data_in_ov7670_V_V_0_vld_in = ap_const_logic_1))) then 
                                        data_in_ov7670_V_V_0_sel_wr <= not(data_in_ov7670_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_in_ov7670_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_ov7670_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((data_in_ov7670_V_V_0_state = ap_const_lv2_2) and (data_in_ov7670_V_V_0_vld_in = ap_const_logic_0)) or ((data_in_ov7670_V_V_0_state = ap_const_lv2_3) and (data_in_ov7670_V_V_0_vld_in = ap_const_logic_0) and (data_in_ov7670_V_V_0_ack_out = ap_const_logic_1)))) then 
                    data_in_ov7670_V_V_0_state <= ap_const_lv2_2;
                elsif ((((data_in_ov7670_V_V_0_state = ap_const_lv2_1) and (data_in_ov7670_V_V_0_ack_out = ap_const_logic_0)) or ((data_in_ov7670_V_V_0_state = ap_const_lv2_3) and (data_in_ov7670_V_V_0_ack_out = ap_const_logic_0) and (data_in_ov7670_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_in_ov7670_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((data_in_ov7670_V_V_0_vld_in = ap_const_logic_0) and (data_in_ov7670_V_V_0_ack_out = ap_const_logic_1))) and not(((data_in_ov7670_V_V_0_ack_out = ap_const_logic_0) and (data_in_ov7670_V_V_0_vld_in = ap_const_logic_1))) and (data_in_ov7670_V_V_0_state = ap_const_lv2_3)) or ((data_in_ov7670_V_V_0_state = ap_const_lv2_1) and (data_in_ov7670_V_V_0_ack_out = ap_const_logic_1)) or ((data_in_ov7670_V_V_0_state = ap_const_lv2_2) and (data_in_ov7670_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_in_ov7670_V_V_0_state <= ap_const_lv2_3;
                else 
                    data_in_ov7670_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_in_sd_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_sd_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((data_in_sd_V_V_0_ack_out = ap_const_logic_1) and (data_in_sd_V_V_0_vld_out = ap_const_logic_1))) then 
                                        data_in_sd_V_V_0_sel_rd <= not(data_in_sd_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_in_sd_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_sd_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((data_in_sd_V_V_0_ack_in = ap_const_logic_1) and (data_in_sd_V_V_0_vld_in = ap_const_logic_1))) then 
                                        data_in_sd_V_V_0_sel_wr <= not(data_in_sd_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_in_sd_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_sd_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((data_in_sd_V_V_0_state = ap_const_lv2_2) and (data_in_sd_V_V_0_vld_in = ap_const_logic_0)) or ((data_in_sd_V_V_0_state = ap_const_lv2_3) and (data_in_sd_V_V_0_vld_in = ap_const_logic_0) and (data_in_sd_V_V_0_ack_out = ap_const_logic_1)))) then 
                    data_in_sd_V_V_0_state <= ap_const_lv2_2;
                elsif ((((data_in_sd_V_V_0_state = ap_const_lv2_1) and (data_in_sd_V_V_0_ack_out = ap_const_logic_0)) or ((data_in_sd_V_V_0_state = ap_const_lv2_3) and (data_in_sd_V_V_0_ack_out = ap_const_logic_0) and (data_in_sd_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_in_sd_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((data_in_sd_V_V_0_vld_in = ap_const_logic_0) and (data_in_sd_V_V_0_ack_out = ap_const_logic_1))) and not(((data_in_sd_V_V_0_ack_out = ap_const_logic_0) and (data_in_sd_V_V_0_vld_in = ap_const_logic_1))) and (data_in_sd_V_V_0_state = ap_const_lv2_3)) or ((data_in_sd_V_V_0_state = ap_const_lv2_1) and (data_in_sd_V_V_0_ack_out = ap_const_logic_1)) or ((data_in_sd_V_V_0_state = ap_const_lv2_2) and (data_in_sd_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_in_sd_V_V_0_state <= ap_const_lv2_3;
                else 
                    data_in_sd_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_V_1_ack_out = ap_const_logic_1) and (outputStream_V_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_V_1_sel_rd <= not(outputStream_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outputStream_V_V_1_ack_in = ap_const_logic_1) and (outputStream_V_V_1_vld_in = ap_const_logic_1))) then 
                                        outputStream_V_V_1_sel_wr <= not(outputStream_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_V_1_state = ap_const_lv2_2) and (outputStream_V_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_V_1_state = ap_const_lv2_3) and (outputStream_V_V_1_vld_in = ap_const_logic_0) and (outputStream_V_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_V_1_state = ap_const_lv2_1) and (outputStream_V_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_V_1_state = ap_const_lv2_3) and (outputStream_V_V_1_ack_out = ap_const_logic_0) and (outputStream_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_V_1_vld_in = ap_const_logic_0) and (outputStream_V_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_V_1_ack_out = ap_const_logic_0) and (outputStream_V_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_V_1_state = ap_const_lv2_3)) or ((outputStream_V_V_1_state = ap_const_lv2_1) and (outputStream_V_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_V_1_state = ap_const_lv2_2) and (outputStream_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_in_ov7670_V_V_0_load_A = ap_const_logic_1)) then
                data_in_ov7670_V_V_0_payload_A <= data_in_ov7670_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_in_ov7670_V_V_0_load_B = ap_const_logic_1)) then
                data_in_ov7670_V_V_0_payload_B <= data_in_ov7670_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_in_sd_V_V_0_load_A = ap_const_logic_1)) then
                data_in_sd_V_V_0_payload_A <= data_in_sd_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_in_sd_V_V_0_load_B = ap_const_logic_1)) then
                data_in_sd_V_V_0_payload_B <= data_in_sd_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outputStream_V_V_1_load_A = ap_const_logic_1)) then
                outputStream_V_V_1_payload_A <= outputStream_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outputStream_V_V_1_load_B = ap_const_logic_1)) then
                outputStream_V_V_1_payload_B <= outputStream_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                switch_stream_read_reg_61 <= (0=>switch_stream, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_in_sd_V_V_0_vld_out, data_in_ov7670_V_V_0_vld_out, outputStream_V_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, switch_stream_read_read_fu_34_p2, ap_block_state3_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((switch_stream_read_read_fu_34_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((switch_stream_read_read_fu_34_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((outputStream_V_V_1_ack_in = ap_const_logic_0) or (data_in_ov7670_V_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((outputStream_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((data_in_sd_V_V_0_vld_out = ap_const_logic_0) or (outputStream_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state3_io_assign_proc : process(outputStream_V_V_1_ack_in, switch_stream_read_reg_61)
    begin
                ap_block_state3_io <= (((switch_stream_read_reg_61 = ap_const_lv1_1) and (outputStream_V_V_1_ack_in = ap_const_logic_0)) or ((switch_stream_read_reg_61 = ap_const_lv1_0) and (outputStream_V_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(outputStream_V_V_1_ack_in, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((outputStream_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(outputStream_V_V_1_ack_in, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((outputStream_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_in_ov7670_V_V_0_ack_in <= data_in_ov7670_V_V_0_state(1);

    data_in_ov7670_V_V_0_ack_out_assign_proc : process(data_in_ov7670_V_V_0_vld_out, outputStream_V_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((outputStream_V_V_1_ack_in = ap_const_logic_0) or (data_in_ov7670_V_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_ov7670_V_V_0_ack_out <= ap_const_logic_1;
        else 
            data_in_ov7670_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data_in_ov7670_V_V_0_data_out_assign_proc : process(data_in_ov7670_V_V_0_payload_A, data_in_ov7670_V_V_0_payload_B, data_in_ov7670_V_V_0_sel)
    begin
        if ((data_in_ov7670_V_V_0_sel = ap_const_logic_1)) then 
            data_in_ov7670_V_V_0_data_out <= data_in_ov7670_V_V_0_payload_B;
        else 
            data_in_ov7670_V_V_0_data_out <= data_in_ov7670_V_V_0_payload_A;
        end if; 
    end process;

    data_in_ov7670_V_V_0_load_A <= (not(data_in_ov7670_V_V_0_sel_wr) and data_in_ov7670_V_V_0_state_cmp_full);
    data_in_ov7670_V_V_0_load_B <= (data_in_ov7670_V_V_0_state_cmp_full and data_in_ov7670_V_V_0_sel_wr);
    data_in_ov7670_V_V_0_sel <= data_in_ov7670_V_V_0_sel_rd;
    data_in_ov7670_V_V_0_state_cmp_full <= '0' when (data_in_ov7670_V_V_0_state = ap_const_lv2_1) else '1';
    data_in_ov7670_V_V_0_vld_in <= data_in_ov7670_V_V_TVALID;
    data_in_ov7670_V_V_0_vld_out <= data_in_ov7670_V_V_0_state(0);

    data_in_ov7670_V_V_TDATA_blk_n_assign_proc : process(data_in_ov7670_V_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_in_ov7670_V_V_TDATA_blk_n <= data_in_ov7670_V_V_0_state(0);
        else 
            data_in_ov7670_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_in_ov7670_V_V_TREADY <= data_in_ov7670_V_V_0_state(1);
    data_in_sd_V_V_0_ack_in <= data_in_sd_V_V_0_state(1);

    data_in_sd_V_V_0_ack_out_assign_proc : process(data_in_sd_V_V_0_vld_out, outputStream_V_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((data_in_sd_V_V_0_vld_out = ap_const_logic_0) or (outputStream_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_in_sd_V_V_0_ack_out <= ap_const_logic_1;
        else 
            data_in_sd_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data_in_sd_V_V_0_data_out_assign_proc : process(data_in_sd_V_V_0_payload_A, data_in_sd_V_V_0_payload_B, data_in_sd_V_V_0_sel)
    begin
        if ((data_in_sd_V_V_0_sel = ap_const_logic_1)) then 
            data_in_sd_V_V_0_data_out <= data_in_sd_V_V_0_payload_B;
        else 
            data_in_sd_V_V_0_data_out <= data_in_sd_V_V_0_payload_A;
        end if; 
    end process;

    data_in_sd_V_V_0_load_A <= (not(data_in_sd_V_V_0_sel_wr) and data_in_sd_V_V_0_state_cmp_full);
    data_in_sd_V_V_0_load_B <= (data_in_sd_V_V_0_state_cmp_full and data_in_sd_V_V_0_sel_wr);
    data_in_sd_V_V_0_sel <= data_in_sd_V_V_0_sel_rd;
    data_in_sd_V_V_0_state_cmp_full <= '0' when (data_in_sd_V_V_0_state = ap_const_lv2_1) else '1';
    data_in_sd_V_V_0_vld_in <= data_in_sd_V_V_TVALID;
    data_in_sd_V_V_0_vld_out <= data_in_sd_V_V_0_state(0);

    data_in_sd_V_V_TDATA_blk_n_assign_proc : process(data_in_sd_V_V_0_state, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_in_sd_V_V_TDATA_blk_n <= data_in_sd_V_V_0_state(0);
        else 
            data_in_sd_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_in_sd_V_V_TREADY <= data_in_sd_V_V_0_state(1);
    outputStream_V_V_1_ack_in <= outputStream_V_V_1_state(1);
    outputStream_V_V_1_ack_out <= outputStream_V_V_TREADY;

    outputStream_V_V_1_data_in_assign_proc : process(data_in_sd_V_V_0_data_out, data_in_sd_V_V_0_vld_out, data_in_ov7670_V_V_0_data_out, data_in_ov7670_V_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((data_in_sd_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            outputStream_V_V_1_data_in <= data_in_sd_V_V_0_data_out;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (data_in_ov7670_V_V_0_vld_out = ap_const_logic_1))) then 
            outputStream_V_V_1_data_in <= data_in_ov7670_V_V_0_data_out;
        else 
            outputStream_V_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    outputStream_V_V_1_data_out_assign_proc : process(outputStream_V_V_1_payload_A, outputStream_V_V_1_payload_B, outputStream_V_V_1_sel)
    begin
        if ((outputStream_V_V_1_sel = ap_const_logic_1)) then 
            outputStream_V_V_1_data_out <= outputStream_V_V_1_payload_B;
        else 
            outputStream_V_V_1_data_out <= outputStream_V_V_1_payload_A;
        end if; 
    end process;

    outputStream_V_V_1_load_A <= (outputStream_V_V_1_state_cmp_full and not(outputStream_V_V_1_sel_wr));
    outputStream_V_V_1_load_B <= (outputStream_V_V_1_state_cmp_full and outputStream_V_V_1_sel_wr);
    outputStream_V_V_1_sel <= outputStream_V_V_1_sel_rd;
    outputStream_V_V_1_state_cmp_full <= '0' when (outputStream_V_V_1_state = ap_const_lv2_1) else '1';

    outputStream_V_V_1_vld_in_assign_proc : process(data_in_sd_V_V_0_vld_out, data_in_ov7670_V_V_0_vld_out, outputStream_V_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((not(((outputStream_V_V_1_ack_in = ap_const_logic_0) or (data_in_ov7670_V_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((data_in_sd_V_V_0_vld_out = ap_const_logic_0) or (outputStream_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            outputStream_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_V_1_vld_out <= outputStream_V_V_1_state(0);
    outputStream_V_V_TDATA <= outputStream_V_V_1_data_out;

    outputStream_V_V_TDATA_blk_n_assign_proc : process(outputStream_V_V_1_state, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, switch_stream_read_reg_61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((switch_stream_read_reg_61 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((switch_stream_read_reg_61 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outputStream_V_V_TDATA_blk_n <= outputStream_V_V_1_state(1);
        else 
            outputStream_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outputStream_V_V_TVALID <= outputStream_V_V_1_state(0);
    switch_stream_read_read_fu_34_p2 <= (0=>switch_stream, others=>'-');
end behav;
