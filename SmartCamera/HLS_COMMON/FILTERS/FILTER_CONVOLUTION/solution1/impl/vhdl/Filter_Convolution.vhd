-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter_Convolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    id_filter_V : IN STD_LOGIC_VECTOR (2 downto 0);
    in_img_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_img_V_TVALID : IN STD_LOGIC;
    in_img_V_TREADY : OUT STD_LOGIC;
    out_img_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_img_V_TVALID : OUT STD_LOGIC;
    out_img_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Filter_Convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Filter_Convolution,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.536250,HLS_SYN_LAT=308344,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1025,HLS_SYN_LUT=1080}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_4B461 : STD_LOGIC_VECTOR (18 downto 0) := "1001011010001100001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_281 : STD_LOGIC_VECTOR (9 downto 0) := "1010000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_img_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal in_img_V_0_vld_in : STD_LOGIC;
    signal in_img_V_0_vld_out : STD_LOGIC;
    signal in_img_V_0_ack_in : STD_LOGIC;
    signal in_img_V_0_ack_out : STD_LOGIC;
    signal in_img_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal in_img_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal in_img_V_0_sel_rd : STD_LOGIC := '0';
    signal in_img_V_0_sel_wr : STD_LOGIC := '0';
    signal in_img_V_0_sel : STD_LOGIC;
    signal in_img_V_0_load_A : STD_LOGIC;
    signal in_img_V_0_load_B : STD_LOGIC;
    signal in_img_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_img_V_0_state_cmp_full : STD_LOGIC;
    signal out_img_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_img_V_1_vld_in : STD_LOGIC;
    signal out_img_V_1_vld_out : STD_LOGIC;
    signal out_img_V_1_ack_in : STD_LOGIC;
    signal out_img_V_1_ack_out : STD_LOGIC;
    signal out_img_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal out_img_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal out_img_V_1_sel_rd : STD_LOGIC := '0';
    signal out_img_V_1_sel_wr : STD_LOGIC := '0';
    signal out_img_V_1_sel : STD_LOGIC;
    signal out_img_V_1_load_A : STD_LOGIC;
    signal out_img_V_1_load_B : STD_LOGIC;
    signal out_img_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_img_V_1_state_cmp_full : STD_LOGIC;
    signal window_V_0_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_1_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_2_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal M_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_0_ce0 : STD_LOGIC;
    signal M_0_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal M_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_1_ce0 : STD_LOGIC;
    signal M_0_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_2_ce0 : STD_LOGIC;
    signal M_0_2_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal M_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_0_ce0 : STD_LOGIC;
    signal M_1_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_1_ce0 : STD_LOGIC;
    signal M_1_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal M_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_2_ce0 : STD_LOGIC;
    signal M_1_2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_0_ce0 : STD_LOGIC;
    signal M_2_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal M_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_1_ce0 : STD_LOGIC;
    signal M_2_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_2_ce0 : STD_LOGIC;
    signal M_2_2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SumF_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SumF_ce0 : STD_LOGIC;
    signal SumF_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Offset_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Offset_ce0 : STD_LOGIC;
    signal Offset_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_V_0_ce0 : STD_LOGIC;
    signal line_buffer_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_0_ce1 : STD_LOGIC;
    signal line_buffer_V_0_we1 : STD_LOGIC;
    signal line_buffer_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_V_1_ce0 : STD_LOGIC;
    signal line_buffer_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_V_1_ce1 : STD_LOGIC;
    signal line_buffer_V_1_we1 : STD_LOGIC;
    signal window_V_0_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_1_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_2_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal in_img_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_img_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal or_cond_reg_940 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal or_cond_reg_940_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_307 : STD_LOGIC_VECTOR (18 downto 0);
    signal row_reg_318 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_reg_329 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_fu_367_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_reg_847 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_32_0_1_fu_371_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_0_1_reg_852 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_0_2_cast_fu_375_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_0_2_cast_reg_857 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_1_fu_379_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_1_reg_862 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_1_1_cast_fu_383_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_1_1_cast_reg_867 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_1_2_cast_fu_387_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_1_2_cast_reg_872 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_2_cast_fu_391_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_2_cast_reg_877 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_2_1_fu_395_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_2_1_reg_882 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_2_2_fu_399_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_2_2_reg_887 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_op_assign_3_tr_tr_s_fu_403_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_op_assign_3_tr_tr_s_reg_892 : STD_LOGIC_VECTOR (13 downto 0);
    signal Offset_load_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op129_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_902_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_428_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal col_mid2_fu_440_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_mid2_reg_911 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_mid2_fu_494_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_V_0_addr_reg_925 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_940_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_532_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_temp_V_1_load_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_1_2_loc_1_l_reg_955 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_0_2_loc_1_l_reg_961 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_temp_V_215_2_fu_708_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_temp_V_215_2_reg_967 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_fu_722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal tmp_3_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_temp_V_1_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_1_2_loc_1_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_0_2_loc_1_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal exitcond_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_s_fu_448_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_mid1_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_mid1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_mid2_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_0_1_fu_627_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_0_1_fu_627_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_33_1_fu_640_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_1_fu_640_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_33_1_1_fu_648_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_1_1_fu_648_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_1_1_fu_648_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_2_2_fu_672_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_2_2_fu_672_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_728_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_736_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_cast_fu_677_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_cast_fu_680_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_fu_683_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_760_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_752_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_744_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_cast_fu_696_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp4_fu_699_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp4_fu_699_p2 : signal is "no";
    signal tmp1_cast_fu_689_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_cast_fu_704_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_714_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_718_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_728_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_728_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_728_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_736_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_736_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_736_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_744_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_744_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_744_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_752_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_752_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_760_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_760_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_760_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_714_ce : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_728_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_736_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_744_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_744_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_752_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_760_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_0_1_fu_627_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_1_1_fu_648_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_1_fu_640_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_2_2_fu_672_p00 : STD_LOGIC_VECTOR (10 downto 0);

    component Filter_Convolutioocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter_ConvolutiopcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component Filter_ConvolutioqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component Filter_ConvolutiorcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Filter_Convolutiosc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component Filter_Convolutiobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component Filter_Convolutiocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiodEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component Filter_ConvolutioeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Filter_Convolutiog8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_Convolutiohbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component Filter_Convolutioibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiojbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiokbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Filter_ConvolutiolbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter_Convolutiomb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    M_0_0_U : component Filter_Convolutiobkb
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_0_0_address0,
        ce0 => M_0_0_ce0,
        q0 => M_0_0_q0);

    M_0_1_U : component Filter_Convolutiocud
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_0_1_address0,
        ce0 => M_0_1_ce0,
        q0 => M_0_1_q0);

    M_0_2_U : component Filter_ConvolutiodEe
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_0_2_address0,
        ce0 => M_0_2_ce0,
        q0 => M_0_2_q0);

    M_1_0_U : component Filter_ConvolutioeOg
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_1_0_address0,
        ce0 => M_1_0_ce0,
        q0 => M_1_0_q0);

    M_1_1_U : component Filter_ConvolutiofYi
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_1_1_address0,
        ce0 => M_1_1_ce0,
        q0 => M_1_1_q0);

    M_1_2_U : component Filter_Convolutiog8j
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_1_2_address0,
        ce0 => M_1_2_ce0,
        q0 => M_1_2_q0);

    M_2_0_U : component Filter_Convolutiohbi
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_2_0_address0,
        ce0 => M_2_0_ce0,
        q0 => M_2_0_q0);

    M_2_1_U : component Filter_Convolutioibs
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_2_1_address0,
        ce0 => M_2_1_ce0,
        q0 => M_2_1_q0);

    M_2_2_U : component Filter_ConvolutiojbC
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_2_2_address0,
        ce0 => M_2_2_ce0,
        q0 => M_2_2_q0);

    SumF_U : component Filter_ConvolutiokbM
    generic map (
        DataWidth => 5,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SumF_address0,
        ce0 => SumF_ce0,
        q0 => SumF_q0);

    Offset_U : component Filter_ConvolutiolbW
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Offset_address0,
        ce0 => Offset_ce0,
        q0 => Offset_q0);

    line_buffer_V_0_U : component Filter_Convolutiomb6
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_V_0_address0,
        ce0 => line_buffer_V_0_ce0,
        q0 => line_buffer_V_0_q0,
        address1 => line_buffer_V_0_addr_reg_925,
        ce1 => line_buffer_V_0_ce1,
        we1 => line_buffer_V_0_we1,
        d1 => line_buffer_V_1_q0);

    line_buffer_V_1_U : component Filter_Convolutiomb6
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_V_1_address0,
        ce0 => line_buffer_V_1_ce0,
        q0 => line_buffer_V_1_q0,
        address1 => line_buffer_V_1_address1,
        ce1 => line_buffer_V_1_ce1,
        we1 => line_buffer_V_1_we1,
        d1 => in_img_V_0_data_out);

    Filter_Convolutioocq_U1 : component Filter_Convolutioocq
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => out_temp_V_215_2_reg_967,
        din1 => grp_fu_714_p1,
        ce => grp_fu_714_ce,
        dout => grp_fu_714_p2);

    Filter_ConvolutiopcA_U2 : component Filter_ConvolutiopcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_728_p0,
        din1 => grp_fu_728_p1,
        din2 => grp_fu_728_p2,
        dout => grp_fu_728_p3);

    Filter_ConvolutiopcA_U3 : component Filter_ConvolutiopcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_736_p0,
        din1 => grp_fu_736_p1,
        din2 => grp_fu_736_p2,
        dout => grp_fu_736_p3);

    Filter_ConvolutioqcK_U4 : component Filter_ConvolutioqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_744_p0,
        din1 => grp_fu_744_p1,
        din2 => grp_fu_744_p2,
        dout => grp_fu_744_p3);

    Filter_ConvolutiorcU_U5 : component Filter_ConvolutiorcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_752_p0,
        din1 => grp_fu_752_p1,
        din2 => grp_fu_760_p3,
        dout => grp_fu_752_p3);

    Filter_Convolutiosc4_U6 : component Filter_Convolutiosc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_760_p0,
        din1 => grp_fu_760_p1,
        din2 => grp_fu_760_p2,
        dout => grp_fu_760_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_fu_422_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    in_img_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_img_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_img_V_0_ack_out = ap_const_logic_1) and (in_img_V_0_vld_out = ap_const_logic_1))) then 
                                        in_img_V_0_sel_rd <= not(in_img_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_img_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_img_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_img_V_0_ack_in = ap_const_logic_1) and (in_img_V_0_vld_in = ap_const_logic_1))) then 
                                        in_img_V_0_sel_wr <= not(in_img_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_img_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_img_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_img_V_0_state = ap_const_lv2_2) and (in_img_V_0_vld_in = ap_const_logic_0)) or ((in_img_V_0_state = ap_const_lv2_3) and (in_img_V_0_vld_in = ap_const_logic_0) and (in_img_V_0_ack_out = ap_const_logic_1)))) then 
                    in_img_V_0_state <= ap_const_lv2_2;
                elsif ((((in_img_V_0_state = ap_const_lv2_1) and (in_img_V_0_ack_out = ap_const_logic_0)) or ((in_img_V_0_state = ap_const_lv2_3) and (in_img_V_0_ack_out = ap_const_logic_0) and (in_img_V_0_vld_in = ap_const_logic_1)))) then 
                    in_img_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_img_V_0_vld_in = ap_const_logic_0) and (in_img_V_0_ack_out = ap_const_logic_1))) and not(((in_img_V_0_ack_out = ap_const_logic_0) and (in_img_V_0_vld_in = ap_const_logic_1))) and (in_img_V_0_state = ap_const_lv2_3)) or ((in_img_V_0_state = ap_const_lv2_1) and (in_img_V_0_ack_out = ap_const_logic_1)) or ((in_img_V_0_state = ap_const_lv2_2) and (in_img_V_0_vld_in = ap_const_logic_1)))) then 
                    in_img_V_0_state <= ap_const_lv2_3;
                else 
                    in_img_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_img_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_img_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_img_V_1_ack_out = ap_const_logic_1) and (out_img_V_1_vld_out = ap_const_logic_1))) then 
                                        out_img_V_1_sel_rd <= not(out_img_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_img_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_img_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_img_V_1_ack_in = ap_const_logic_1) and (out_img_V_1_vld_in = ap_const_logic_1))) then 
                                        out_img_V_1_sel_wr <= not(out_img_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_img_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_img_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_img_V_1_state = ap_const_lv2_2) and (out_img_V_1_vld_in = ap_const_logic_0)) or ((out_img_V_1_state = ap_const_lv2_3) and (out_img_V_1_vld_in = ap_const_logic_0) and (out_img_V_1_ack_out = ap_const_logic_1)))) then 
                    out_img_V_1_state <= ap_const_lv2_2;
                elsif ((((out_img_V_1_state = ap_const_lv2_1) and (out_img_V_1_ack_out = ap_const_logic_0)) or ((out_img_V_1_state = ap_const_lv2_3) and (out_img_V_1_ack_out = ap_const_logic_0) and (out_img_V_1_vld_in = ap_const_logic_1)))) then 
                    out_img_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_img_V_1_vld_in = ap_const_logic_0) and (out_img_V_1_ack_out = ap_const_logic_1))) and not(((out_img_V_1_ack_out = ap_const_logic_0) and (out_img_V_1_vld_in = ap_const_logic_1))) and (out_img_V_1_state = ap_const_lv2_3)) or ((out_img_V_1_state = ap_const_lv2_1) and (out_img_V_1_ack_out = ap_const_logic_1)) or ((out_img_V_1_state = ap_const_lv2_2) and (out_img_V_1_vld_in = ap_const_logic_1)))) then 
                    out_img_V_1_state <= ap_const_lv2_3;
                else 
                    out_img_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    col_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_422_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_reg_329 <= col_1_fu_532_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                col_reg_329 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    in_temp_V_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_temp_V_1_fu_104 <= in_img_V_0_data_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                in_temp_V_1_fu_104 <= window_V_2_2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_422_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_307 <= indvar_flatten_next_fu_428_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_307 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    row_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_422_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                row_reg_318 <= row_mid2_fu_494_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                row_reg_318 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    window_V_0_2_loc_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_921 = ap_const_lv1_1) and (exitcond_flatten_reg_902 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                window_V_0_2_loc_1_fu_112 <= line_buffer_V_0_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                window_V_0_2_loc_1_fu_112 <= window_V_0_2;
            end if; 
        end if;
    end process;

    window_V_1_2_loc_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_921 = ap_const_lv1_1) and (exitcond_flatten_reg_902 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                window_V_1_2_loc_1_fu_108 <= line_buffer_V_1_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                window_V_1_2_loc_1_fu_108 <= window_V_1_2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Offset_load_reg_897 <= Offset_q0;
                    i_op_assign_3_tr_tr_s_reg_892(4 downto 0) <= i_op_assign_3_tr_tr_s_fu_403_p1(4 downto 0);
                tmp_32_0_1_reg_852 <= tmp_32_0_1_fu_371_p1;
                tmp_32_0_2_cast_reg_857 <= tmp_32_0_2_cast_fu_375_p1;
                    tmp_32_1_1_cast_reg_867(3 downto 0) <= tmp_32_1_1_cast_fu_383_p1(3 downto 0);
                tmp_32_1_2_cast_reg_872 <= tmp_32_1_2_cast_fu_387_p1;
                tmp_32_1_reg_862 <= tmp_32_1_fu_379_p1;
                tmp_32_2_1_reg_882 <= tmp_32_2_1_fu_395_p1;
                tmp_32_2_2_reg_887 <= tmp_32_2_2_fu_399_p1;
                tmp_32_2_cast_reg_877 <= tmp_32_2_cast_fu_391_p1;
                tmp_5_cast_reg_847 <= tmp_5_cast_fu_367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_422_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                col_mid2_reg_911 <= col_mid2_fu_440_p3;
                or_cond_reg_940 <= or_cond_fu_526_p2;
                tmp_2_reg_936 <= tmp_2_fu_514_p2;
                tmp_8_reg_921 <= tmp_8_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_902 <= exitcond_flatten_fu_422_p2;
                exitcond_flatten_reg_902_pp0_iter1_reg <= exitcond_flatten_reg_902;
                in_temp_V_1_load_reg_949 <= in_temp_V_1_fu_104;
                or_cond_reg_940_pp0_iter1_reg <= or_cond_reg_940;
                window_V_0_2_loc_1_l_reg_961 <= window_V_0_2_loc_1_fu_112;
                window_V_1_2_loc_1_l_reg_955 <= window_V_1_2_loc_1_fu_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_img_V_0_load_A = ap_const_logic_1)) then
                in_img_V_0_payload_A <= in_img_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_img_V_0_load_B = ap_const_logic_1)) then
                in_img_V_0_payload_B <= in_img_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_502_p2 = ap_const_lv1_1) and (exitcond_flatten_fu_422_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                line_buffer_V_0_addr_reg_925 <= tmp_s_fu_508_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_cond_reg_940_pp0_iter10_reg <= or_cond_reg_940_pp0_iter9_reg;
                or_cond_reg_940_pp0_iter11_reg <= or_cond_reg_940_pp0_iter10_reg;
                or_cond_reg_940_pp0_iter12_reg <= or_cond_reg_940_pp0_iter11_reg;
                or_cond_reg_940_pp0_iter13_reg <= or_cond_reg_940_pp0_iter12_reg;
                or_cond_reg_940_pp0_iter14_reg <= or_cond_reg_940_pp0_iter13_reg;
                or_cond_reg_940_pp0_iter15_reg <= or_cond_reg_940_pp0_iter14_reg;
                or_cond_reg_940_pp0_iter16_reg <= or_cond_reg_940_pp0_iter15_reg;
                or_cond_reg_940_pp0_iter17_reg <= or_cond_reg_940_pp0_iter16_reg;
                or_cond_reg_940_pp0_iter18_reg <= or_cond_reg_940_pp0_iter17_reg;
                or_cond_reg_940_pp0_iter19_reg <= or_cond_reg_940_pp0_iter18_reg;
                or_cond_reg_940_pp0_iter20_reg <= or_cond_reg_940_pp0_iter19_reg;
                or_cond_reg_940_pp0_iter2_reg <= or_cond_reg_940_pp0_iter1_reg;
                or_cond_reg_940_pp0_iter3_reg <= or_cond_reg_940_pp0_iter2_reg;
                or_cond_reg_940_pp0_iter4_reg <= or_cond_reg_940_pp0_iter3_reg;
                or_cond_reg_940_pp0_iter5_reg <= or_cond_reg_940_pp0_iter4_reg;
                or_cond_reg_940_pp0_iter6_reg <= or_cond_reg_940_pp0_iter5_reg;
                or_cond_reg_940_pp0_iter7_reg <= or_cond_reg_940_pp0_iter6_reg;
                or_cond_reg_940_pp0_iter8_reg <= or_cond_reg_940_pp0_iter7_reg;
                or_cond_reg_940_pp0_iter9_reg <= or_cond_reg_940_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_img_V_1_load_A = ap_const_logic_1)) then
                out_img_V_1_payload_A <= tmp_11_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_img_V_1_load_B = ap_const_logic_1)) then
                out_img_V_1_payload_B <= tmp_11_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_940_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                out_temp_V_215_2_reg_967 <= out_temp_V_215_2_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_902_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                window_V_0_1 <= window_V_0_2_loc_1_l_reg_961;
                window_V_1_1 <= window_V_1_2_loc_1_l_reg_955;
                window_V_2_1 <= in_temp_V_1_load_reg_949;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_921 = ap_const_lv1_1) and (exitcond_flatten_reg_902 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                window_V_0_2 <= line_buffer_V_0_q0;
                window_V_1_2 <= line_buffer_V_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                window_V_2_2 <= in_img_V_0_data_out;
            end if;
        end if;
    end process;
    tmp_32_1_1_cast_reg_867(11 downto 4) <= "00000000";
    i_op_assign_3_tr_tr_s_reg_892(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_img_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (out_img_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    M_0_0_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_0_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_0_0_ce0 <= ap_const_logic_1;
        else 
            M_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_0_1_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_0_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_0_1_ce0 <= ap_const_logic_1;
        else 
            M_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_0_2_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_0_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_0_2_ce0 <= ap_const_logic_1;
        else 
            M_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_0_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_1_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_1_0_ce0 <= ap_const_logic_1;
        else 
            M_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_1_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_1_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_1_1_ce0 <= ap_const_logic_1;
        else 
            M_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_2_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_1_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_1_2_ce0 <= ap_const_logic_1;
        else 
            M_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_2_0_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_2_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_2_0_ce0 <= ap_const_logic_1;
        else 
            M_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_2_1_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_2_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_2_1_ce0 <= ap_const_logic_1;
        else 
            M_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_2_2_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    M_2_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_2_2_ce0 <= ap_const_logic_1;
        else 
            M_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Offset_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    Offset_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            Offset_ce0 <= ap_const_logic_1;
        else 
            Offset_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SumF_address0 <= tmp_3_fu_340_p1(3 - 1 downto 0);

    SumF_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            SumF_ce0 <= ap_const_logic_1;
        else 
            SumF_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_img_V_0_vld_out, ap_enable_reg_pp0_iter1, ap_predicate_op129_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= ((in_img_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_img_V_0_vld_out, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_predicate_op129_read_state4, ap_block_state23_io, ap_block_state24_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((in_img_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_img_V_0_vld_out, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_predicate_op129_read_state4, ap_block_state23_io, ap_block_state24_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((in_img_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(out_img_V_1_ack_in, or_cond_reg_940_pp0_iter19_reg)
    begin
                ap_block_state23_io <= ((or_cond_reg_940_pp0_iter19_reg = ap_const_lv1_1) and (out_img_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(out_img_V_1_ack_in, or_cond_reg_940_pp0_iter20_reg)
    begin
                ap_block_state24_io <= ((or_cond_reg_940_pp0_iter20_reg = ap_const_lv1_1) and (out_img_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_img_V_0_vld_out, ap_predicate_op129_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((in_img_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op129_read_state4 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(out_img_V_1_ack_in, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (out_img_V_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op129_read_state4_assign_proc : process(exitcond_flatten_reg_902, tmp_2_reg_936)
    begin
                ap_predicate_op129_read_state4 <= ((tmp_2_reg_936 = ap_const_lv1_1) and (exitcond_flatten_reg_902 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(out_img_V_1_ack_in, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (out_img_V_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_1_fu_532_p2 <= std_logic_vector(unsigned(col_mid2_fu_440_p3) + unsigned(ap_const_lv10_1));
    col_mid2_fu_440_p3 <= 
        ap_const_lv10_0 when (exitcond_fu_434_p2(0) = '1') else 
        col_reg_329;
    exitcond_flatten_fu_422_p2 <= "1" when (indvar_flatten_reg_307 = ap_const_lv19_4B461) else "0";
    exitcond_fu_434_p2 <= "1" when (col_reg_329 = ap_const_lv10_281) else "0";

    grp_fu_714_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_714_ce <= ap_const_logic_1;
        else 
            grp_fu_714_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_714_p1 <= i_op_assign_3_tr_tr_s_reg_892(6 - 1 downto 0);
    grp_fu_728_p0 <= grp_fu_728_p00(8 - 1 downto 0);
    grp_fu_728_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_0_1),10));
    grp_fu_728_p1 <= tmp_5_cast_reg_847(2 - 1 downto 0);
    grp_fu_728_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_33_0_1_fu_627_p0) * signed(tmp_33_0_1_fu_627_p1))), 11));
    grp_fu_736_p0 <= grp_fu_736_p00(8 - 1 downto 0);
    grp_fu_736_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_0_2_loc_1_fu_112),10));
    grp_fu_736_p1 <= tmp_32_0_2_cast_reg_857(2 - 1 downto 0);
    grp_fu_736_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_33_1_fu_640_p0) * signed(tmp_33_1_fu_640_p1))), 11));
    grp_fu_744_p0 <= grp_fu_744_p00(8 - 1 downto 0);
    grp_fu_744_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_1_2_loc_1_fu_108),11));
    grp_fu_744_p1 <= tmp_32_1_2_cast_reg_872(3 - 1 downto 0);
    grp_fu_744_p2 <= grp_fu_744_p20(12 - 1 downto 0);
    grp_fu_744_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_1_1_fu_648_p2),13));
    grp_fu_752_p0 <= grp_fu_752_p00(8 - 1 downto 0);
    grp_fu_752_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_2_1),10));
    grp_fu_752_p1 <= tmp_32_2_cast_reg_877(2 - 1 downto 0);
    grp_fu_760_p0 <= grp_fu_760_p00(8 - 1 downto 0);
    grp_fu_760_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_temp_V_1_load_reg_949),11));
    grp_fu_760_p1 <= tmp_32_2_1_reg_882(3 - 1 downto 0);
    grp_fu_760_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_33_2_2_fu_672_p0) * signed(tmp_33_2_2_fu_672_p1))), 11));
    i_op_assign_3_tr_tr_s_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SumF_q0),14));
    in_img_V_0_ack_in <= in_img_V_0_state(1);

    in_img_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op129_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_img_V_0_ack_out <= ap_const_logic_1;
        else 
            in_img_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_img_V_0_data_out_assign_proc : process(in_img_V_0_payload_A, in_img_V_0_payload_B, in_img_V_0_sel)
    begin
        if ((in_img_V_0_sel = ap_const_logic_1)) then 
            in_img_V_0_data_out <= in_img_V_0_payload_B;
        else 
            in_img_V_0_data_out <= in_img_V_0_payload_A;
        end if; 
    end process;

    in_img_V_0_load_A <= (in_img_V_0_state_cmp_full and not(in_img_V_0_sel_wr));
    in_img_V_0_load_B <= (in_img_V_0_state_cmp_full and in_img_V_0_sel_wr);
    in_img_V_0_sel <= in_img_V_0_sel_rd;
    in_img_V_0_state_cmp_full <= '0' when (in_img_V_0_state = ap_const_lv2_1) else '1';
    in_img_V_0_vld_in <= in_img_V_TVALID;
    in_img_V_0_vld_out <= in_img_V_0_state(0);

    in_img_V_TDATA_blk_n_assign_proc : process(in_img_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_902, tmp_2_reg_936)
    begin
        if (((tmp_2_reg_936 = ap_const_lv1_1) and (exitcond_flatten_reg_902 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_img_V_TDATA_blk_n <= in_img_V_0_state(0);
        else 
            in_img_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_img_V_TREADY <= in_img_V_0_state(1);
    indvar_flatten_next_fu_428_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_307) + unsigned(ap_const_lv19_1));
    line_buffer_V_0_address0 <= tmp_s_fu_508_p1(10 - 1 downto 0);

    line_buffer_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_902, ap_block_pp0_stage0_11001, tmp_8_reg_921)
    begin
        if (((tmp_8_reg_921 = ap_const_lv1_1) and (exitcond_flatten_reg_902 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_we1 <= ap_const_logic_1;
        else 
            line_buffer_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_1_address0 <= tmp_s_fu_508_p1(10 - 1 downto 0);
    line_buffer_V_1_address1 <= tmp_9_fu_575_p1(10 - 1 downto 0);

    line_buffer_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op129_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_we1 <= ap_const_logic_1;
        else 
            line_buffer_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_526_p2 <= (tmp_7_fu_520_p2 and tmp_6_mid2_fu_486_p3);
    out_img_V_1_ack_in <= out_img_V_1_state(1);
    out_img_V_1_ack_out <= out_img_V_TREADY;

    out_img_V_1_data_out_assign_proc : process(out_img_V_1_payload_A, out_img_V_1_payload_B, out_img_V_1_sel)
    begin
        if ((out_img_V_1_sel = ap_const_logic_1)) then 
            out_img_V_1_data_out <= out_img_V_1_payload_B;
        else 
            out_img_V_1_data_out <= out_img_V_1_payload_A;
        end if; 
    end process;

    out_img_V_1_load_A <= (out_img_V_1_state_cmp_full and not(out_img_V_1_sel_wr));
    out_img_V_1_load_B <= (out_img_V_1_state_cmp_full and out_img_V_1_sel_wr);
    out_img_V_1_sel <= out_img_V_1_sel_rd;
    out_img_V_1_state_cmp_full <= '0' when (out_img_V_1_state = ap_const_lv2_1) else '1';

    out_img_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter20, or_cond_reg_940_pp0_iter19_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond_reg_940_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1))) then 
            out_img_V_1_vld_in <= ap_const_logic_1;
        else 
            out_img_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_img_V_1_vld_out <= out_img_V_1_state(0);
    out_img_V_TDATA <= out_img_V_1_data_out;

    out_img_V_TDATA_blk_n_assign_proc : process(out_img_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter20, or_cond_reg_940_pp0_iter19_reg, ap_enable_reg_pp0_iter21, or_cond_reg_940_pp0_iter20_reg)
    begin
        if ((((or_cond_reg_940_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((or_cond_reg_940_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)))) then 
            out_img_V_TDATA_blk_n <= out_img_V_1_state(1);
        else 
            out_img_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_img_V_TVALID <= out_img_V_1_state(0);
    out_temp_V_215_2_fu_708_p2 <= std_logic_vector(signed(tmp1_cast_fu_689_p1) + signed(tmp4_cast_fu_704_p1));
    row_mid2_fu_494_p3 <= 
        row_s_fu_448_p2 when (exitcond_fu_434_p2(0) = '1') else 
        row_reg_318;
    row_s_fu_448_p2 <= std_logic_vector(unsigned(row_reg_318) + unsigned(ap_const_lv9_1));
        tmp1_cast_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_683_p2),14));

    tmp1_fu_683_p2 <= std_logic_vector(signed(tmp2_cast_fu_677_p1) + signed(tmp3_cast_fu_680_p1));
        tmp2_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_728_p3),12));

        tmp3_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_736_p3),12));

        tmp4_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_699_p2),14));

    tmp4_fu_699_p2 <= std_logic_vector(signed(grp_fu_744_p3) + signed(tmp6_cast_fu_696_p1));
        tmp6_cast_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_752_p3),13));

    tmp_11_fu_722_p2 <= std_logic_vector(unsigned(tmp_fu_718_p1) + unsigned(Offset_load_reg_897));
    tmp_2_fu_514_p2 <= (tmp_8_fu_502_p2 and tmp_4_mid2_fu_466_p3);
        tmp_32_0_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_0_1_q0),11));

        tmp_32_0_2_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_0_2_q0),10));

    tmp_32_1_1_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M_1_1_q0),12));
        tmp_32_1_2_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_1_2_q0),11));

        tmp_32_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_1_0_q0),11));

        tmp_32_2_1_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_2_1_q0),11));

        tmp_32_2_2_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_2_2_q0),11));

        tmp_32_2_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_2_0_q0),10));

    tmp_33_0_1_fu_627_p0 <= tmp_33_0_1_fu_627_p00(8 - 1 downto 0);
    tmp_33_0_1_fu_627_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_0_2_loc_1_l_reg_961),11));
    tmp_33_0_1_fu_627_p1 <= tmp_32_0_1_reg_852(3 - 1 downto 0);
    tmp_33_1_1_fu_648_p0 <= tmp_33_1_1_fu_648_p00(8 - 1 downto 0);
    tmp_33_1_1_fu_648_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_1_2_loc_1_l_reg_955),12));
    tmp_33_1_1_fu_648_p1 <= tmp_32_1_1_cast_reg_867(4 - 1 downto 0);
    tmp_33_1_1_fu_648_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_1_1_fu_648_p0) * unsigned(tmp_33_1_1_fu_648_p1), 12));
    tmp_33_1_fu_640_p0 <= tmp_33_1_fu_640_p00(8 - 1 downto 0);
    tmp_33_1_fu_640_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_1_1),11));
    tmp_33_1_fu_640_p1 <= tmp_32_1_reg_862(3 - 1 downto 0);
    tmp_33_2_2_fu_672_p0 <= tmp_33_2_2_fu_672_p00(8 - 1 downto 0);
    tmp_33_2_2_fu_672_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_temp_V_1_fu_104),11));
    tmp_33_2_2_fu_672_p1 <= tmp_32_2_2_reg_887(3 - 1 downto 0);
    tmp_3_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(id_filter_V),64));
    tmp_4_fu_460_p2 <= "1" when (unsigned(row_reg_318) < unsigned(ap_const_lv9_1E0)) else "0";
    tmp_4_mid1_fu_454_p2 <= "1" when (unsigned(row_s_fu_448_p2) < unsigned(ap_const_lv9_1E0)) else "0";
    tmp_4_mid2_fu_466_p3 <= 
        tmp_4_mid1_fu_454_p2 when (exitcond_fu_434_p2(0) = '1') else 
        tmp_4_fu_460_p2;
        tmp_5_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_0_0_q0),10));

    tmp_5_fu_480_p2 <= "0" when (row_reg_318 = ap_const_lv9_0) else "1";
    tmp_6_mid1_fu_474_p2 <= "0" when (row_s_fu_448_p2 = ap_const_lv9_0) else "1";
    tmp_6_mid2_fu_486_p3 <= 
        tmp_6_mid1_fu_474_p2 when (exitcond_fu_434_p2(0) = '1') else 
        tmp_5_fu_480_p2;
    tmp_7_fu_520_p2 <= "0" when (col_mid2_fu_440_p3 = ap_const_lv10_0) else "1";
    tmp_8_fu_502_p2 <= "1" when (unsigned(col_mid2_fu_440_p3) < unsigned(ap_const_lv10_280)) else "0";
    tmp_9_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_mid2_reg_911),64));
    tmp_fu_718_p1 <= grp_fu_714_p2(8 - 1 downto 0);
    tmp_s_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_mid2_fu_440_p3),64));
end behav;
