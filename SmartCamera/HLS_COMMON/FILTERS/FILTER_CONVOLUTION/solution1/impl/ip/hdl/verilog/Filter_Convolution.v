// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Filter_Convolution,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.536250,HLS_SYN_LAT=308344,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1025,HLS_SYN_LUT=1080}" *)

module Filter_Convolution (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        id_filter_V,
        in_img_V_TDATA,
        in_img_V_TVALID,
        in_img_V_TREADY,
        out_img_V_TDATA,
        out_img_V_TVALID,
        out_img_V_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state25 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] id_filter_V;
input  [7:0] in_img_V_TDATA;
input   in_img_V_TVALID;
output   in_img_V_TREADY;
output  [7:0] out_img_V_TDATA;
output   out_img_V_TVALID;
input   out_img_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] in_img_V_0_data_out;
wire    in_img_V_0_vld_in;
wire    in_img_V_0_vld_out;
wire    in_img_V_0_ack_in;
reg    in_img_V_0_ack_out;
reg   [7:0] in_img_V_0_payload_A;
reg   [7:0] in_img_V_0_payload_B;
reg    in_img_V_0_sel_rd;
reg    in_img_V_0_sel_wr;
wire    in_img_V_0_sel;
wire    in_img_V_0_load_A;
wire    in_img_V_0_load_B;
reg   [1:0] in_img_V_0_state;
wire    in_img_V_0_state_cmp_full;
reg   [7:0] out_img_V_1_data_out;
reg    out_img_V_1_vld_in;
wire    out_img_V_1_vld_out;
wire    out_img_V_1_ack_in;
wire    out_img_V_1_ack_out;
reg   [7:0] out_img_V_1_payload_A;
reg   [7:0] out_img_V_1_payload_B;
reg    out_img_V_1_sel_rd;
reg    out_img_V_1_sel_wr;
wire    out_img_V_1_sel;
wire    out_img_V_1_load_A;
wire    out_img_V_1_load_B;
reg   [1:0] out_img_V_1_state;
wire    out_img_V_1_state_cmp_full;
reg   [7:0] window_V_0_2;
reg   [7:0] window_V_1_2;
reg   [7:0] window_V_2_2;
wire   [2:0] M_0_0_address0;
reg    M_0_0_ce0;
wire   [1:0] M_0_0_q0;
wire   [2:0] M_0_1_address0;
reg    M_0_1_ce0;
wire   [2:0] M_0_1_q0;
wire   [2:0] M_0_2_address0;
reg    M_0_2_ce0;
wire   [1:0] M_0_2_q0;
wire   [2:0] M_1_0_address0;
reg    M_1_0_ce0;
wire   [2:0] M_1_0_q0;
wire   [2:0] M_1_1_address0;
reg    M_1_1_ce0;
wire   [3:0] M_1_1_q0;
wire   [2:0] M_1_2_address0;
reg    M_1_2_ce0;
wire   [2:0] M_1_2_q0;
wire   [2:0] M_2_0_address0;
reg    M_2_0_ce0;
wire   [1:0] M_2_0_q0;
wire   [2:0] M_2_1_address0;
reg    M_2_1_ce0;
wire   [2:0] M_2_1_q0;
wire   [2:0] M_2_2_address0;
reg    M_2_2_ce0;
wire   [2:0] M_2_2_q0;
wire   [2:0] SumF_address0;
reg    SumF_ce0;
wire   [4:0] SumF_q0;
wire   [2:0] Offset_address0;
reg    Offset_ce0;
wire   [7:0] Offset_q0;
wire   [9:0] line_buffer_V_0_address0;
reg    line_buffer_V_0_ce0;
wire   [7:0] line_buffer_V_0_q0;
reg    line_buffer_V_0_ce1;
reg    line_buffer_V_0_we1;
wire   [9:0] line_buffer_V_1_address0;
reg    line_buffer_V_1_ce0;
wire   [7:0] line_buffer_V_1_q0;
wire   [9:0] line_buffer_V_1_address1;
reg    line_buffer_V_1_ce1;
reg    line_buffer_V_1_we1;
reg   [7:0] window_V_0_1;
reg   [7:0] window_V_1_1;
reg   [7:0] window_V_2_1;
reg    in_img_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_902;
reg   [0:0] tmp_2_reg_936;
reg    out_img_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter20;
reg   [0:0] or_cond_reg_940;
reg   [0:0] or_cond_reg_940_pp0_iter19_reg;
reg    ap_enable_reg_pp0_iter21;
reg   [0:0] or_cond_reg_940_pp0_iter20_reg;
reg   [18:0] indvar_flatten_reg_307;
reg   [8:0] row_reg_318;
reg   [9:0] col_reg_329;
wire  signed [9:0] tmp_5_cast_fu_367_p1;
reg  signed [9:0] tmp_5_cast_reg_847;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_32_0_1_fu_371_p1;
reg  signed [10:0] tmp_32_0_1_reg_852;
wire  signed [9:0] tmp_32_0_2_cast_fu_375_p1;
reg  signed [9:0] tmp_32_0_2_cast_reg_857;
wire  signed [10:0] tmp_32_1_fu_379_p1;
reg  signed [10:0] tmp_32_1_reg_862;
wire   [11:0] tmp_32_1_1_cast_fu_383_p1;
reg   [11:0] tmp_32_1_1_cast_reg_867;
wire  signed [10:0] tmp_32_1_2_cast_fu_387_p1;
reg  signed [10:0] tmp_32_1_2_cast_reg_872;
wire  signed [9:0] tmp_32_2_cast_fu_391_p1;
reg  signed [9:0] tmp_32_2_cast_reg_877;
wire  signed [10:0] tmp_32_2_1_fu_395_p1;
reg  signed [10:0] tmp_32_2_1_reg_882;
wire  signed [10:0] tmp_32_2_2_fu_399_p1;
reg  signed [10:0] tmp_32_2_2_reg_887;
wire   [13:0] i_op_assign_3_tr_tr_s_fu_403_p1;
reg   [13:0] i_op_assign_3_tr_tr_s_reg_892;
reg   [7:0] Offset_load_reg_897;
wire   [0:0] exitcond_flatten_fu_422_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op129_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
reg    ap_block_state23_io;
wire    ap_block_state24_pp0_stage0_iter21;
reg    ap_block_state24_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_902_pp0_iter1_reg;
wire   [18:0] indvar_flatten_next_fu_428_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] col_mid2_fu_440_p3;
reg   [9:0] col_mid2_reg_911;
wire   [8:0] row_mid2_fu_494_p3;
wire   [0:0] tmp_8_fu_502_p2;
reg   [0:0] tmp_8_reg_921;
reg   [9:0] line_buffer_V_0_addr_reg_925;
wire   [0:0] tmp_2_fu_514_p2;
wire   [0:0] or_cond_fu_526_p2;
reg   [0:0] or_cond_reg_940_pp0_iter1_reg;
reg   [0:0] or_cond_reg_940_pp0_iter2_reg;
reg   [0:0] or_cond_reg_940_pp0_iter3_reg;
reg   [0:0] or_cond_reg_940_pp0_iter4_reg;
reg   [0:0] or_cond_reg_940_pp0_iter5_reg;
reg   [0:0] or_cond_reg_940_pp0_iter6_reg;
reg   [0:0] or_cond_reg_940_pp0_iter7_reg;
reg   [0:0] or_cond_reg_940_pp0_iter8_reg;
reg   [0:0] or_cond_reg_940_pp0_iter9_reg;
reg   [0:0] or_cond_reg_940_pp0_iter10_reg;
reg   [0:0] or_cond_reg_940_pp0_iter11_reg;
reg   [0:0] or_cond_reg_940_pp0_iter12_reg;
reg   [0:0] or_cond_reg_940_pp0_iter13_reg;
reg   [0:0] or_cond_reg_940_pp0_iter14_reg;
reg   [0:0] or_cond_reg_940_pp0_iter15_reg;
reg   [0:0] or_cond_reg_940_pp0_iter16_reg;
reg   [0:0] or_cond_reg_940_pp0_iter17_reg;
reg   [0:0] or_cond_reg_940_pp0_iter18_reg;
wire   [9:0] col_1_fu_532_p2;
reg   [7:0] in_temp_V_1_load_reg_949;
reg   [7:0] window_V_1_2_loc_1_l_reg_955;
reg   [7:0] window_V_0_2_loc_1_l_reg_961;
wire   [13:0] out_temp_V_215_2_fu_708_p2;
reg   [13:0] out_temp_V_215_2_reg_967;
wire   [7:0] tmp_11_fu_722_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state4;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
wire   [63:0] tmp_3_fu_340_p1;
wire   [63:0] tmp_s_fu_508_p1;
wire   [63:0] tmp_9_fu_575_p1;
reg   [7:0] in_temp_V_1_fu_104;
reg   [7:0] window_V_1_2_loc_1_fu_108;
reg   [7:0] window_V_0_2_loc_1_fu_112;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] exitcond_fu_434_p2;
wire   [8:0] row_s_fu_448_p2;
wire   [0:0] tmp_4_mid1_fu_454_p2;
wire   [0:0] tmp_4_fu_460_p2;
wire   [0:0] tmp_6_mid1_fu_474_p2;
wire   [0:0] tmp_5_fu_480_p2;
wire   [0:0] tmp_4_mid2_fu_466_p3;
wire   [0:0] tmp_6_mid2_fu_486_p3;
wire   [0:0] tmp_7_fu_520_p2;
wire   [7:0] tmp_33_0_1_fu_627_p0;
wire  signed [2:0] tmp_33_0_1_fu_627_p1;
wire   [7:0] tmp_33_1_fu_640_p0;
wire  signed [2:0] tmp_33_1_fu_640_p1;
wire   [7:0] tmp_33_1_1_fu_648_p0;
wire   [3:0] tmp_33_1_1_fu_648_p1;
wire   [11:0] tmp_33_1_1_fu_648_p2;
wire   [7:0] tmp_33_2_2_fu_672_p0;
wire  signed [2:0] tmp_33_2_2_fu_672_p1;
wire  signed [10:0] grp_fu_728_p3;
wire  signed [10:0] grp_fu_736_p3;
wire  signed [11:0] tmp2_cast_fu_677_p1;
wire  signed [11:0] tmp3_cast_fu_680_p1;
wire   [11:0] tmp1_fu_683_p2;
wire  signed [10:0] grp_fu_760_p3;
wire  signed [11:0] grp_fu_752_p3;
wire  signed [12:0] grp_fu_744_p3;
wire  signed [12:0] tmp6_cast_fu_696_p1;
(* use_dsp48 = "no" *) wire   [12:0] tmp4_fu_699_p2;
wire  signed [13:0] tmp1_cast_fu_689_p1;
wire  signed [13:0] tmp4_cast_fu_704_p1;
wire   [5:0] grp_fu_714_p1;
wire   [7:0] grp_fu_714_p2;
wire   [7:0] tmp_fu_718_p1;
wire   [7:0] grp_fu_728_p0;
wire  signed [1:0] grp_fu_728_p1;
wire   [10:0] grp_fu_728_p2;
wire   [7:0] grp_fu_736_p0;
wire  signed [1:0] grp_fu_736_p1;
wire   [10:0] grp_fu_736_p2;
wire   [7:0] grp_fu_744_p0;
wire  signed [2:0] grp_fu_744_p1;
wire   [11:0] grp_fu_744_p2;
wire   [7:0] grp_fu_752_p0;
wire  signed [1:0] grp_fu_752_p1;
wire   [7:0] grp_fu_760_p0;
wire  signed [2:0] grp_fu_760_p1;
wire   [10:0] grp_fu_760_p2;
reg    grp_fu_714_ce;
wire    ap_CS_fsm_state25;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_728_p00;
wire   [9:0] grp_fu_736_p00;
wire   [10:0] grp_fu_744_p00;
wire   [12:0] grp_fu_744_p20;
wire   [9:0] grp_fu_752_p00;
wire   [10:0] grp_fu_760_p00;
wire   [10:0] tmp_33_0_1_fu_627_p00;
wire   [11:0] tmp_33_1_1_fu_648_p00;
wire   [10:0] tmp_33_1_fu_640_p00;
wire   [10:0] tmp_33_2_2_fu_672_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 in_img_V_0_sel_rd = 1'b0;
#0 in_img_V_0_sel_wr = 1'b0;
#0 in_img_V_0_state = 2'd0;
#0 out_img_V_1_sel_rd = 1'b0;
#0 out_img_V_1_sel_wr = 1'b0;
#0 out_img_V_1_state = 2'd0;
#0 window_V_0_2 = 8'd0;
#0 window_V_1_2 = 8'd0;
#0 window_V_2_2 = 8'd0;
#0 window_V_0_1 = 8'd0;
#0 window_V_1_1 = 8'd0;
#0 window_V_2_1 = 8'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

Filter_Convolutiobkb #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_0_0_address0),
    .ce0(M_0_0_ce0),
    .q0(M_0_0_q0)
);

Filter_Convolutiocud #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_0_1_address0),
    .ce0(M_0_1_ce0),
    .q0(M_0_1_q0)
);

Filter_ConvolutiodEe #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_0_2_address0),
    .ce0(M_0_2_ce0),
    .q0(M_0_2_q0)
);

Filter_ConvolutioeOg #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_1_0_address0),
    .ce0(M_1_0_ce0),
    .q0(M_1_0_q0)
);

Filter_ConvolutiofYi #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_1_1_address0),
    .ce0(M_1_1_ce0),
    .q0(M_1_1_q0)
);

Filter_Convolutiog8j #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_1_2_address0),
    .ce0(M_1_2_ce0),
    .q0(M_1_2_q0)
);

Filter_Convolutiohbi #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_2_0_address0),
    .ce0(M_2_0_ce0),
    .q0(M_2_0_q0)
);

Filter_Convolutioibs #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_2_1_address0),
    .ce0(M_2_1_ce0),
    .q0(M_2_1_q0)
);

Filter_ConvolutiojbC #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_2_2_address0),
    .ce0(M_2_2_ce0),
    .q0(M_2_2_q0)
);

Filter_ConvolutiokbM #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SumF_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SumF_address0),
    .ce0(SumF_ce0),
    .q0(SumF_q0)
);

Filter_ConvolutiolbW #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Offset_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Offset_address0),
    .ce0(Offset_ce0),
    .q0(Offset_q0)
);

Filter_Convolutiomb6 #(
    .DataWidth( 8 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
line_buffer_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buffer_V_0_address0),
    .ce0(line_buffer_V_0_ce0),
    .q0(line_buffer_V_0_q0),
    .address1(line_buffer_V_0_addr_reg_925),
    .ce1(line_buffer_V_0_ce1),
    .we1(line_buffer_V_0_we1),
    .d1(line_buffer_V_1_q0)
);

Filter_Convolutiomb6 #(
    .DataWidth( 8 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
line_buffer_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buffer_V_1_address0),
    .ce0(line_buffer_V_1_ce0),
    .q0(line_buffer_V_1_q0),
    .address1(line_buffer_V_1_address1),
    .ce1(line_buffer_V_1_ce1),
    .we1(line_buffer_V_1_we1),
    .d1(in_img_V_0_data_out)
);

Filter_Convolutioocq #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
Filter_Convolutioocq_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(out_temp_V_215_2_reg_967),
    .din1(grp_fu_714_p1),
    .ce(grp_fu_714_ce),
    .dout(grp_fu_714_p2)
);

Filter_ConvolutiopcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
Filter_ConvolutiopcA_U2(
    .din0(grp_fu_728_p0),
    .din1(grp_fu_728_p1),
    .din2(grp_fu_728_p2),
    .dout(grp_fu_728_p3)
);

Filter_ConvolutiopcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
Filter_ConvolutiopcA_U3(
    .din0(grp_fu_736_p0),
    .din1(grp_fu_736_p1),
    .din2(grp_fu_736_p2),
    .dout(grp_fu_736_p3)
);

Filter_ConvolutioqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 13 ))
Filter_ConvolutioqcK_U4(
    .din0(grp_fu_744_p0),
    .din1(grp_fu_744_p1),
    .din2(grp_fu_744_p2),
    .dout(grp_fu_744_p3)
);

Filter_ConvolutiorcU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
Filter_ConvolutiorcU_U5(
    .din0(grp_fu_752_p0),
    .din1(grp_fu_752_p1),
    .din2(grp_fu_760_p3),
    .dout(grp_fu_752_p3)
);

Filter_Convolutiosc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
Filter_Convolutiosc4_U6(
    .din0(grp_fu_760_p0),
    .din1(grp_fu_760_p1),
    .din2(grp_fu_760_p2),
    .dout(grp_fu_760_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((exitcond_flatten_fu_422_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state4)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_img_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_img_V_0_ack_out == 1'b1) & (in_img_V_0_vld_out == 1'b1))) begin
            in_img_V_0_sel_rd <= ~in_img_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_img_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_img_V_0_ack_in == 1'b1) & (in_img_V_0_vld_in == 1'b1))) begin
            in_img_V_0_sel_wr <= ~in_img_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_img_V_0_state <= 2'd0;
    end else begin
        if ((((in_img_V_0_state == 2'd2) & (in_img_V_0_vld_in == 1'b0)) | ((in_img_V_0_state == 2'd3) & (in_img_V_0_vld_in == 1'b0) & (in_img_V_0_ack_out == 1'b1)))) begin
            in_img_V_0_state <= 2'd2;
        end else if ((((in_img_V_0_state == 2'd1) & (in_img_V_0_ack_out == 1'b0)) | ((in_img_V_0_state == 2'd3) & (in_img_V_0_ack_out == 1'b0) & (in_img_V_0_vld_in == 1'b1)))) begin
            in_img_V_0_state <= 2'd1;
        end else if (((~((in_img_V_0_vld_in == 1'b0) & (in_img_V_0_ack_out == 1'b1)) & ~((in_img_V_0_ack_out == 1'b0) & (in_img_V_0_vld_in == 1'b1)) & (in_img_V_0_state == 2'd3)) | ((in_img_V_0_state == 2'd1) & (in_img_V_0_ack_out == 1'b1)) | ((in_img_V_0_state == 2'd2) & (in_img_V_0_vld_in == 1'b1)))) begin
            in_img_V_0_state <= 2'd3;
        end else begin
            in_img_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_img_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_img_V_1_ack_out == 1'b1) & (out_img_V_1_vld_out == 1'b1))) begin
            out_img_V_1_sel_rd <= ~out_img_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_img_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_img_V_1_ack_in == 1'b1) & (out_img_V_1_vld_in == 1'b1))) begin
            out_img_V_1_sel_wr <= ~out_img_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_img_V_1_state <= 2'd0;
    end else begin
        if ((((out_img_V_1_state == 2'd2) & (out_img_V_1_vld_in == 1'b0)) | ((out_img_V_1_state == 2'd3) & (out_img_V_1_vld_in == 1'b0) & (out_img_V_1_ack_out == 1'b1)))) begin
            out_img_V_1_state <= 2'd2;
        end else if ((((out_img_V_1_state == 2'd1) & (out_img_V_1_ack_out == 1'b0)) | ((out_img_V_1_state == 2'd3) & (out_img_V_1_ack_out == 1'b0) & (out_img_V_1_vld_in == 1'b1)))) begin
            out_img_V_1_state <= 2'd1;
        end else if (((~((out_img_V_1_vld_in == 1'b0) & (out_img_V_1_ack_out == 1'b1)) & ~((out_img_V_1_ack_out == 1'b0) & (out_img_V_1_vld_in == 1'b1)) & (out_img_V_1_state == 2'd3)) | ((out_img_V_1_state == 2'd1) & (out_img_V_1_ack_out == 1'b1)) | ((out_img_V_1_state == 2'd2) & (out_img_V_1_vld_in == 1'b1)))) begin
            out_img_V_1_state <= 2'd3;
        end else begin
            out_img_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_422_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_reg_329 <= col_1_fu_532_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        col_reg_329 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op129_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_temp_V_1_fu_104 <= in_img_V_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_temp_V_1_fu_104 <= window_V_2_2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_422_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_307 <= indvar_flatten_next_fu_428_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_307 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_422_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_reg_318 <= row_mid2_fu_494_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        row_reg_318 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_reg_921 == 1'd1) & (exitcond_flatten_reg_902 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_V_0_2_loc_1_fu_112 <= line_buffer_V_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        window_V_0_2_loc_1_fu_112 <= window_V_0_2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_reg_921 == 1'd1) & (exitcond_flatten_reg_902 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_V_1_2_loc_1_fu_108 <= line_buffer_V_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        window_V_1_2_loc_1_fu_108 <= window_V_1_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Offset_load_reg_897 <= Offset_q0;
        i_op_assign_3_tr_tr_s_reg_892[4 : 0] <= i_op_assign_3_tr_tr_s_fu_403_p1[4 : 0];
        tmp_32_0_1_reg_852 <= tmp_32_0_1_fu_371_p1;
        tmp_32_0_2_cast_reg_857 <= tmp_32_0_2_cast_fu_375_p1;
        tmp_32_1_1_cast_reg_867[3 : 0] <= tmp_32_1_1_cast_fu_383_p1[3 : 0];
        tmp_32_1_2_cast_reg_872 <= tmp_32_1_2_cast_fu_387_p1;
        tmp_32_1_reg_862 <= tmp_32_1_fu_379_p1;
        tmp_32_2_1_reg_882 <= tmp_32_2_1_fu_395_p1;
        tmp_32_2_2_reg_887 <= tmp_32_2_2_fu_399_p1;
        tmp_32_2_cast_reg_877 <= tmp_32_2_cast_fu_391_p1;
        tmp_5_cast_reg_847 <= tmp_5_cast_fu_367_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_422_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_mid2_reg_911 <= col_mid2_fu_440_p3;
        or_cond_reg_940 <= or_cond_fu_526_p2;
        tmp_2_reg_936 <= tmp_2_fu_514_p2;
        tmp_8_reg_921 <= tmp_8_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_902 <= exitcond_flatten_fu_422_p2;
        exitcond_flatten_reg_902_pp0_iter1_reg <= exitcond_flatten_reg_902;
        in_temp_V_1_load_reg_949 <= in_temp_V_1_fu_104;
        or_cond_reg_940_pp0_iter1_reg <= or_cond_reg_940;
        window_V_0_2_loc_1_l_reg_961 <= window_V_0_2_loc_1_fu_112;
        window_V_1_2_loc_1_l_reg_955 <= window_V_1_2_loc_1_fu_108;
    end
end

always @ (posedge ap_clk) begin
    if ((in_img_V_0_load_A == 1'b1)) begin
        in_img_V_0_payload_A <= in_img_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_img_V_0_load_B == 1'b1)) begin
        in_img_V_0_payload_B <= in_img_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_502_p2 == 1'd1) & (exitcond_flatten_fu_422_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_addr_reg_925 <= tmp_s_fu_508_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond_reg_940_pp0_iter10_reg <= or_cond_reg_940_pp0_iter9_reg;
        or_cond_reg_940_pp0_iter11_reg <= or_cond_reg_940_pp0_iter10_reg;
        or_cond_reg_940_pp0_iter12_reg <= or_cond_reg_940_pp0_iter11_reg;
        or_cond_reg_940_pp0_iter13_reg <= or_cond_reg_940_pp0_iter12_reg;
        or_cond_reg_940_pp0_iter14_reg <= or_cond_reg_940_pp0_iter13_reg;
        or_cond_reg_940_pp0_iter15_reg <= or_cond_reg_940_pp0_iter14_reg;
        or_cond_reg_940_pp0_iter16_reg <= or_cond_reg_940_pp0_iter15_reg;
        or_cond_reg_940_pp0_iter17_reg <= or_cond_reg_940_pp0_iter16_reg;
        or_cond_reg_940_pp0_iter18_reg <= or_cond_reg_940_pp0_iter17_reg;
        or_cond_reg_940_pp0_iter19_reg <= or_cond_reg_940_pp0_iter18_reg;
        or_cond_reg_940_pp0_iter20_reg <= or_cond_reg_940_pp0_iter19_reg;
        or_cond_reg_940_pp0_iter2_reg <= or_cond_reg_940_pp0_iter1_reg;
        or_cond_reg_940_pp0_iter3_reg <= or_cond_reg_940_pp0_iter2_reg;
        or_cond_reg_940_pp0_iter4_reg <= or_cond_reg_940_pp0_iter3_reg;
        or_cond_reg_940_pp0_iter5_reg <= or_cond_reg_940_pp0_iter4_reg;
        or_cond_reg_940_pp0_iter6_reg <= or_cond_reg_940_pp0_iter5_reg;
        or_cond_reg_940_pp0_iter7_reg <= or_cond_reg_940_pp0_iter6_reg;
        or_cond_reg_940_pp0_iter8_reg <= or_cond_reg_940_pp0_iter7_reg;
        or_cond_reg_940_pp0_iter9_reg <= or_cond_reg_940_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((out_img_V_1_load_A == 1'b1)) begin
        out_img_V_1_payload_A <= tmp_11_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_img_V_1_load_B == 1'b1)) begin
        out_img_V_1_payload_B <= tmp_11_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_940_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_temp_V_215_2_reg_967 <= out_temp_V_215_2_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_902_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        window_V_0_1 <= window_V_0_2_loc_1_l_reg_961;
        window_V_1_1 <= window_V_1_2_loc_1_l_reg_955;
        window_V_2_1 <= in_temp_V_1_load_reg_949;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_reg_921 == 1'd1) & (exitcond_flatten_reg_902 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_V_0_2 <= line_buffer_V_0_q0;
        window_V_1_2 <= line_buffer_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op129_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_V_2_2 <= in_img_V_0_data_out;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_0_0_ce0 = 1'b1;
    end else begin
        M_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_0_1_ce0 = 1'b1;
    end else begin
        M_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_0_2_ce0 = 1'b1;
    end else begin
        M_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_1_0_ce0 = 1'b1;
    end else begin
        M_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_1_1_ce0 = 1'b1;
    end else begin
        M_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_1_2_ce0 = 1'b1;
    end else begin
        M_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_2_0_ce0 = 1'b1;
    end else begin
        M_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_2_1_ce0 = 1'b1;
    end else begin
        M_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_2_2_ce0 = 1'b1;
    end else begin
        M_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Offset_ce0 = 1'b1;
    end else begin
        Offset_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        SumF_ce0 = 1'b1;
    end else begin
        SumF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (out_img_V_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (out_img_V_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_714_ce = 1'b1;
    end else begin
        grp_fu_714_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op129_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_img_V_0_ack_out = 1'b1;
    end else begin
        in_img_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_img_V_0_sel == 1'b1)) begin
        in_img_V_0_data_out = in_img_V_0_payload_B;
    end else begin
        in_img_V_0_data_out = in_img_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_2_reg_936 == 1'd1) & (exitcond_flatten_reg_902 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_img_V_TDATA_blk_n = in_img_V_0_state[1'd0];
    end else begin
        in_img_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_ce0 = 1'b1;
    end else begin
        line_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_ce1 = 1'b1;
    end else begin
        line_buffer_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_reg_921 == 1'd1) & (exitcond_flatten_reg_902 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_we1 = 1'b1;
    end else begin
        line_buffer_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce0 = 1'b1;
    end else begin
        line_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce1 = 1'b1;
    end else begin
        line_buffer_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op129_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_we1 = 1'b1;
    end else begin
        line_buffer_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((out_img_V_1_sel == 1'b1)) begin
        out_img_V_1_data_out = out_img_V_1_payload_B;
    end else begin
        out_img_V_1_data_out = out_img_V_1_payload_A;
    end
end

always @ (*) begin
    if (((or_cond_reg_940_pp0_iter19_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        out_img_V_1_vld_in = 1'b1;
    end else begin
        out_img_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((or_cond_reg_940_pp0_iter20_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((or_cond_reg_940_pp0_iter19_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1)))) begin
        out_img_V_TDATA_blk_n = out_img_V_1_state[1'd1];
    end else begin
        out_img_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (out_img_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_0_0_address0 = tmp_3_fu_340_p1;

assign M_0_1_address0 = tmp_3_fu_340_p1;

assign M_0_2_address0 = tmp_3_fu_340_p1;

assign M_1_0_address0 = tmp_3_fu_340_p1;

assign M_1_1_address0 = tmp_3_fu_340_p1;

assign M_1_2_address0 = tmp_3_fu_340_p1;

assign M_2_0_address0 = tmp_3_fu_340_p1;

assign M_2_1_address0 = tmp_3_fu_340_p1;

assign M_2_2_address0 = tmp_3_fu_340_p1;

assign Offset_address0 = tmp_3_fu_340_p1;

assign SumF_address0 = tmp_3_fu_340_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((in_img_V_0_vld_out == 1'b0) & (ap_predicate_op129_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((in_img_V_0_vld_out == 1'b0) & (ap_predicate_op129_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((in_img_V_0_vld_out == 1'b0) & (ap_predicate_op129_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((or_cond_reg_940_pp0_iter19_reg == 1'd1) & (out_img_V_1_ack_in == 1'b0));
end

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((or_cond_reg_940_pp0_iter20_reg == 1'd1) & (out_img_V_1_ack_in == 1'b0));
end

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((in_img_V_0_vld_out == 1'b0) & (ap_predicate_op129_read_state4 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op129_read_state4 = ((tmp_2_reg_936 == 1'd1) & (exitcond_flatten_reg_902 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_1_fu_532_p2 = (col_mid2_fu_440_p3 + 10'd1);

assign col_mid2_fu_440_p3 = ((exitcond_fu_434_p2[0:0] === 1'b1) ? 10'd0 : col_reg_329);

assign exitcond_flatten_fu_422_p2 = ((indvar_flatten_reg_307 == 19'd308321) ? 1'b1 : 1'b0);

assign exitcond_fu_434_p2 = ((col_reg_329 == 10'd641) ? 1'b1 : 1'b0);

assign grp_fu_714_p1 = i_op_assign_3_tr_tr_s_reg_892;

assign grp_fu_728_p0 = grp_fu_728_p00;

assign grp_fu_728_p00 = window_V_0_1;

assign grp_fu_728_p1 = tmp_5_cast_reg_847;

assign grp_fu_728_p2 = ($signed({{1'b0}, {tmp_33_0_1_fu_627_p0}}) * $signed(tmp_33_0_1_fu_627_p1));

assign grp_fu_736_p0 = grp_fu_736_p00;

assign grp_fu_736_p00 = window_V_0_2_loc_1_fu_112;

assign grp_fu_736_p1 = tmp_32_0_2_cast_reg_857;

assign grp_fu_736_p2 = ($signed({{1'b0}, {tmp_33_1_fu_640_p0}}) * $signed(tmp_33_1_fu_640_p1));

assign grp_fu_744_p0 = grp_fu_744_p00;

assign grp_fu_744_p00 = window_V_1_2_loc_1_fu_108;

assign grp_fu_744_p1 = tmp_32_1_2_cast_reg_872;

assign grp_fu_744_p2 = grp_fu_744_p20;

assign grp_fu_744_p20 = tmp_33_1_1_fu_648_p2;

assign grp_fu_752_p0 = grp_fu_752_p00;

assign grp_fu_752_p00 = window_V_2_1;

assign grp_fu_752_p1 = tmp_32_2_cast_reg_877;

assign grp_fu_760_p0 = grp_fu_760_p00;

assign grp_fu_760_p00 = in_temp_V_1_load_reg_949;

assign grp_fu_760_p1 = tmp_32_2_1_reg_882;

assign grp_fu_760_p2 = ($signed({{1'b0}, {tmp_33_2_2_fu_672_p0}}) * $signed(tmp_33_2_2_fu_672_p1));

assign i_op_assign_3_tr_tr_s_fu_403_p1 = SumF_q0;

assign in_img_V_0_ack_in = in_img_V_0_state[1'd1];

assign in_img_V_0_load_A = (in_img_V_0_state_cmp_full & ~in_img_V_0_sel_wr);

assign in_img_V_0_load_B = (in_img_V_0_state_cmp_full & in_img_V_0_sel_wr);

assign in_img_V_0_sel = in_img_V_0_sel_rd;

assign in_img_V_0_state_cmp_full = ((in_img_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_img_V_0_vld_in = in_img_V_TVALID;

assign in_img_V_0_vld_out = in_img_V_0_state[1'd0];

assign in_img_V_TREADY = in_img_V_0_state[1'd1];

assign indvar_flatten_next_fu_428_p2 = (indvar_flatten_reg_307 + 19'd1);

assign line_buffer_V_0_address0 = tmp_s_fu_508_p1;

assign line_buffer_V_1_address0 = tmp_s_fu_508_p1;

assign line_buffer_V_1_address1 = tmp_9_fu_575_p1;

assign or_cond_fu_526_p2 = (tmp_7_fu_520_p2 & tmp_6_mid2_fu_486_p3);

assign out_img_V_1_ack_in = out_img_V_1_state[1'd1];

assign out_img_V_1_ack_out = out_img_V_TREADY;

assign out_img_V_1_load_A = (out_img_V_1_state_cmp_full & ~out_img_V_1_sel_wr);

assign out_img_V_1_load_B = (out_img_V_1_state_cmp_full & out_img_V_1_sel_wr);

assign out_img_V_1_sel = out_img_V_1_sel_rd;

assign out_img_V_1_state_cmp_full = ((out_img_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_img_V_1_vld_out = out_img_V_1_state[1'd0];

assign out_img_V_TDATA = out_img_V_1_data_out;

assign out_img_V_TVALID = out_img_V_1_state[1'd0];

assign out_temp_V_215_2_fu_708_p2 = ($signed(tmp1_cast_fu_689_p1) + $signed(tmp4_cast_fu_704_p1));

assign row_mid2_fu_494_p3 = ((exitcond_fu_434_p2[0:0] === 1'b1) ? row_s_fu_448_p2 : row_reg_318);

assign row_s_fu_448_p2 = (row_reg_318 + 9'd1);

assign tmp1_cast_fu_689_p1 = $signed(tmp1_fu_683_p2);

assign tmp1_fu_683_p2 = ($signed(tmp2_cast_fu_677_p1) + $signed(tmp3_cast_fu_680_p1));

assign tmp2_cast_fu_677_p1 = grp_fu_728_p3;

assign tmp3_cast_fu_680_p1 = grp_fu_736_p3;

assign tmp4_cast_fu_704_p1 = $signed(tmp4_fu_699_p2);

assign tmp4_fu_699_p2 = ($signed(grp_fu_744_p3) + $signed(tmp6_cast_fu_696_p1));

assign tmp6_cast_fu_696_p1 = grp_fu_752_p3;

assign tmp_11_fu_722_p2 = (tmp_fu_718_p1 + Offset_load_reg_897);

assign tmp_2_fu_514_p2 = (tmp_8_fu_502_p2 & tmp_4_mid2_fu_466_p3);

assign tmp_32_0_1_fu_371_p1 = $signed(M_0_1_q0);

assign tmp_32_0_2_cast_fu_375_p1 = $signed(M_0_2_q0);

assign tmp_32_1_1_cast_fu_383_p1 = M_1_1_q0;

assign tmp_32_1_2_cast_fu_387_p1 = $signed(M_1_2_q0);

assign tmp_32_1_fu_379_p1 = $signed(M_1_0_q0);

assign tmp_32_2_1_fu_395_p1 = $signed(M_2_1_q0);

assign tmp_32_2_2_fu_399_p1 = $signed(M_2_2_q0);

assign tmp_32_2_cast_fu_391_p1 = $signed(M_2_0_q0);

assign tmp_33_0_1_fu_627_p0 = tmp_33_0_1_fu_627_p00;

assign tmp_33_0_1_fu_627_p00 = window_V_0_2_loc_1_l_reg_961;

assign tmp_33_0_1_fu_627_p1 = tmp_32_0_1_reg_852;

assign tmp_33_1_1_fu_648_p0 = tmp_33_1_1_fu_648_p00;

assign tmp_33_1_1_fu_648_p00 = window_V_1_2_loc_1_l_reg_955;

assign tmp_33_1_1_fu_648_p1 = tmp_32_1_1_cast_reg_867;

assign tmp_33_1_1_fu_648_p2 = (tmp_33_1_1_fu_648_p0 * tmp_33_1_1_fu_648_p1);

assign tmp_33_1_fu_640_p0 = tmp_33_1_fu_640_p00;

assign tmp_33_1_fu_640_p00 = window_V_1_1;

assign tmp_33_1_fu_640_p1 = tmp_32_1_reg_862;

assign tmp_33_2_2_fu_672_p0 = tmp_33_2_2_fu_672_p00;

assign tmp_33_2_2_fu_672_p00 = in_temp_V_1_fu_104;

assign tmp_33_2_2_fu_672_p1 = tmp_32_2_2_reg_887;

assign tmp_3_fu_340_p1 = id_filter_V;

assign tmp_4_fu_460_p2 = ((row_reg_318 < 9'd480) ? 1'b1 : 1'b0);

assign tmp_4_mid1_fu_454_p2 = ((row_s_fu_448_p2 < 9'd480) ? 1'b1 : 1'b0);

assign tmp_4_mid2_fu_466_p3 = ((exitcond_fu_434_p2[0:0] === 1'b1) ? tmp_4_mid1_fu_454_p2 : tmp_4_fu_460_p2);

assign tmp_5_cast_fu_367_p1 = $signed(M_0_0_q0);

assign tmp_5_fu_480_p2 = ((row_reg_318 != 9'd0) ? 1'b1 : 1'b0);

assign tmp_6_mid1_fu_474_p2 = ((row_s_fu_448_p2 != 9'd0) ? 1'b1 : 1'b0);

assign tmp_6_mid2_fu_486_p3 = ((exitcond_fu_434_p2[0:0] === 1'b1) ? tmp_6_mid1_fu_474_p2 : tmp_5_fu_480_p2);

assign tmp_7_fu_520_p2 = ((col_mid2_fu_440_p3 != 10'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_502_p2 = ((col_mid2_fu_440_p3 < 10'd640) ? 1'b1 : 1'b0);

assign tmp_9_fu_575_p1 = col_mid2_reg_911;

assign tmp_fu_718_p1 = grp_fu_714_p2[7:0];

assign tmp_s_fu_508_p1 = col_mid2_fu_440_p3;

always @ (posedge ap_clk) begin
    tmp_32_1_1_cast_reg_867[11:4] <= 8'b00000000;
    i_op_assign_3_tr_tr_s_reg_892[13:5] <= 9'b000000000;
end

endmodule //Filter_Convolution
