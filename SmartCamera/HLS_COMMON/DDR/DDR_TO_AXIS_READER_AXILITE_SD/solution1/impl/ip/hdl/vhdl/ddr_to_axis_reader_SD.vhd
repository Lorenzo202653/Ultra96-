-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ddr_to_axis_reader_SD is
generic (
    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    outStream_channel_1_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_channel_1_V_TVALID : OUT STD_LOGIC;
    outStream_channel_1_V_TREADY : IN STD_LOGIC;
    outstream_channel_2_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outstream_channel_2_V_TVALID : OUT STD_LOGIC;
    outstream_channel_2_V_TREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_base_ddr_addr_WLAST : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_ARREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_RREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RLAST : IN STD_LOGIC;
    m_axi_base_ddr_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_BREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ddr_to_axis_reader_SD is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ddr_to_axis_reader_SD,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=42.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=41.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=3,HLS_SYN_FF=1251,HLS_SYN_LUT=4424}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv14_204 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000100";
    constant ap_const_lv15_7FFC : STD_LOGIC_VECTOR (14 downto 0) := "111111111111100";
    constant ap_const_lv15_1FF : STD_LOGIC_VECTOR (14 downto 0) := "000000111111111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal outStream_channel_1_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_channel_1_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_channel_1_V_1_vld_in : STD_LOGIC;
    signal outStream_channel_1_V_1_vld_out : STD_LOGIC;
    signal outStream_channel_1_V_1_ack_in : STD_LOGIC;
    signal outStream_channel_1_V_1_ack_out : STD_LOGIC;
    signal outStream_channel_1_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_channel_1_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_channel_1_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_channel_1_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_channel_1_V_1_sel : STD_LOGIC;
    signal outStream_channel_1_V_1_load_A : STD_LOGIC;
    signal outStream_channel_1_V_1_load_B : STD_LOGIC;
    signal outStream_channel_1_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_channel_1_V_1_state_cmp_full : STD_LOGIC;
    signal outstream_channel_2_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outstream_channel_2_V_1_vld_in : STD_LOGIC;
    signal outstream_channel_2_V_1_vld_out : STD_LOGIC;
    signal outstream_channel_2_V_1_ack_in : STD_LOGIC;
    signal outstream_channel_2_V_1_ack_out : STD_LOGIC;
    signal outstream_channel_2_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outstream_channel_2_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outstream_channel_2_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_channel_2_V_1_sel_wr : STD_LOGIC := '0';
    signal outstream_channel_2_V_1_sel : STD_LOGIC;
    signal outstream_channel_2_V_1_load_A : STD_LOGIC;
    signal outstream_channel_2_V_1_load_B : STD_LOGIC;
    signal outstream_channel_2_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outstream_channel_2_V_1_state_cmp_full : STD_LOGIC;
    signal base_address : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_dim : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_number : STD_LOGIC_VECTOR (7 downto 0);
    signal update_intr : STD_LOGIC;
    signal stereo_enabler : STD_LOGIC;
    signal inner_index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_d_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal FRAME_BUFFER_DIM_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_d : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal FRAME_OFFSET : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_d_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal FRAME_BUFFER_NUMBER_r : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal guard_variable_for_d_3 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal BASE_ADDRESS_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal luma_chroma_switch : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outStream_channel_1_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_6_reg_1440 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1444 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal tmp_6_reg_1440_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1444_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_reg_1488 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal tmp_reg_1488_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_channel_2_V_TDATA_blk_n : STD_LOGIC;
    signal base_ddr_addr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_1426 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_AWREADY : STD_LOGIC;
    signal base_ddr_addr_WREADY : STD_LOGIC;
    signal base_ddr_addr_ARVALID : STD_LOGIC;
    signal base_ddr_addr_ARREADY : STD_LOGIC;
    signal base_ddr_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_RVALID : STD_LOGIC;
    signal base_ddr_addr_RREADY : STD_LOGIC;
    signal base_ddr_addr_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_RLAST : STD_LOGIC;
    signal base_ddr_addr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BVALID : STD_LOGIC;
    signal base_ddr_addr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_397 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_reg_397_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_reg_409 : STD_LOGIC_VECTOR (12 downto 0);
    signal j1_reg_430 : STD_LOGIC_VECTOR (12 downto 0);
    signal stereo_enabler_read_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal inner_index_load_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_FRAME_BUFFER_N_1_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_FRAME_BUFFER_N_1_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1407 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_1_fu_652_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_1_reg_1415 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_sig_ioackin_base_ddr_addr_ARREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal exitcond_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1426_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_698_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_next_reg_1430 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal base_ddr_addr_addr_r_reg_1435 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_709_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op207_write_state14 : BOOLEAN;
    signal ap_predicate_op228_write_state14 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op229_write_state15 : BOOLEAN;
    signal ap_predicate_op230_write_state15 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_16_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_739_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1448 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_fu_771_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_reg_1458 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_fu_838_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_87_fu_955_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_1071_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal offset_1_fu_1076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_fu_1082_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_11_fu_1090_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_reg_1492 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_reg_1503 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_fu_1119_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_33_fu_1236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_1358_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state17 : STD_LOGIC;
    signal buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_we1 : STD_LOGIC;
    signal buffer_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_d_4_load_fu_445_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_d_5_load_fu_460_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_d_6_load_fu_475_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_d_7_load_fu_490_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset1_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_386 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_mux_indvar_phi_fu_401_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_j_1_phi_fu_423_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_3_fu_764_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_reg_pp1_iter0_j_1_reg_420 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar1_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex264_cast_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex276_cast_fu_1104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_base_ddr_addr_ARREADY : STD_LOGIC := '0';
    signal storemerge_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_FRAME_BUFFER_DIM_fl_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_OFFSET_flag_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_BUFFER_NUMBER_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_base_address_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_BASE_ADDRESS_flag_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal tmp_7_fu_505_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_FRAME_BUFFER_DIM_fl_fu_519_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame_buffer_dim_FRA_fu_525_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_OFFSET_flag_fu_533_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_BUFFER_NUMBER_fu_539_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_FRAME_BUFFER_N_fu_545_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_FRAME_BUFFER_N_fu_545_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_BASE_ADDRESS_flag_fu_557_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_base_address_fu_563_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset_s_fu_571_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_BASE_ADDRESS_l_fu_579_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_587_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset_s_fu_571_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_593_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_BASE_ADDRESS_l_fu_579_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_dim_FRA_fu_525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gepindex62_cast_fu_743_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_775_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal adjSize_fu_785_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep_fu_789_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize55_cast_fu_795_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_811_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp1_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_817_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex2_fu_825_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal start_pos3_fu_844_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos3_fu_851_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_72_fu_863_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_73_fu_867_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_881_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_77_fu_893_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_fu_871_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_887_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_78_fu_899_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_80_fu_915_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_fu_923_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_79_fu_907_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_fu_937_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_943_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_949_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal start_pos_fu_960_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos2_fu_967_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_fu_979_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_55_fu_983_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_53_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_997_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_59_fu_1009_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_56_fu_987_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_1003_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_1015_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_62_fu_1031_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_63_fu_1039_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_61_fu_1023_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_1053_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_1059_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_1065_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex74_cast_fu_1094_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal start_pos1_fu_1125_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos_fu_1132_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_1144_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_1148_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1162_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_1174_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_1152_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_1168_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_1180_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_1196_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_1204_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_1188_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_1218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_1224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_1230_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1241_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal start_pos2_fu_1246_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos1_fu_1254_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_1266_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_fu_1270_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1284_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_fu_1296_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_1274_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_1290_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_fu_1302_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_1318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_fu_1326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_fu_1310_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_1336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_1340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_1352_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_782 : BOOLEAN;
    signal ap_condition_1458 : BOOLEAN;
    signal ap_condition_473 : BOOLEAN;
    signal ap_condition_544 : BOOLEAN;

    component ddr_to_axis_readebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ddr_to_axis_reader_SD_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        base_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_dim : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_number : OUT STD_LOGIC_VECTOR (7 downto 0);
        update_intr : OUT STD_LOGIC;
        stereo_enabler : OUT STD_LOGIC );
    end component;


    component ddr_to_axis_reader_SD_base_ddr_addr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ddr_to_axis_reader_SD_AXILiteS_s_axi_U : component ddr_to_axis_reader_SD_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        base_address => base_address,
        frame_buffer_dim => frame_buffer_dim,
        frame_buffer_offset => frame_buffer_offset,
        frame_buffer_number => frame_buffer_number,
        update_intr => update_intr,
        stereo_enabler => stereo_enabler);

    ddr_to_axis_reader_SD_base_ddr_addr_m_axi_U : component ddr_to_axis_reader_SD_base_ddr_addr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BASE_DDR_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_base_ddr_addr_AWVALID,
        AWREADY => m_axi_base_ddr_addr_AWREADY,
        AWADDR => m_axi_base_ddr_addr_AWADDR,
        AWID => m_axi_base_ddr_addr_AWID,
        AWLEN => m_axi_base_ddr_addr_AWLEN,
        AWSIZE => m_axi_base_ddr_addr_AWSIZE,
        AWBURST => m_axi_base_ddr_addr_AWBURST,
        AWLOCK => m_axi_base_ddr_addr_AWLOCK,
        AWCACHE => m_axi_base_ddr_addr_AWCACHE,
        AWPROT => m_axi_base_ddr_addr_AWPROT,
        AWQOS => m_axi_base_ddr_addr_AWQOS,
        AWREGION => m_axi_base_ddr_addr_AWREGION,
        AWUSER => m_axi_base_ddr_addr_AWUSER,
        WVALID => m_axi_base_ddr_addr_WVALID,
        WREADY => m_axi_base_ddr_addr_WREADY,
        WDATA => m_axi_base_ddr_addr_WDATA,
        WSTRB => m_axi_base_ddr_addr_WSTRB,
        WLAST => m_axi_base_ddr_addr_WLAST,
        WID => m_axi_base_ddr_addr_WID,
        WUSER => m_axi_base_ddr_addr_WUSER,
        ARVALID => m_axi_base_ddr_addr_ARVALID,
        ARREADY => m_axi_base_ddr_addr_ARREADY,
        ARADDR => m_axi_base_ddr_addr_ARADDR,
        ARID => m_axi_base_ddr_addr_ARID,
        ARLEN => m_axi_base_ddr_addr_ARLEN,
        ARSIZE => m_axi_base_ddr_addr_ARSIZE,
        ARBURST => m_axi_base_ddr_addr_ARBURST,
        ARLOCK => m_axi_base_ddr_addr_ARLOCK,
        ARCACHE => m_axi_base_ddr_addr_ARCACHE,
        ARPROT => m_axi_base_ddr_addr_ARPROT,
        ARQOS => m_axi_base_ddr_addr_ARQOS,
        ARREGION => m_axi_base_ddr_addr_ARREGION,
        ARUSER => m_axi_base_ddr_addr_ARUSER,
        RVALID => m_axi_base_ddr_addr_RVALID,
        RREADY => m_axi_base_ddr_addr_RREADY,
        RDATA => m_axi_base_ddr_addr_RDATA,
        RLAST => m_axi_base_ddr_addr_RLAST,
        RID => m_axi_base_ddr_addr_RID,
        RUSER => m_axi_base_ddr_addr_RUSER,
        RRESP => m_axi_base_ddr_addr_RRESP,
        BVALID => m_axi_base_ddr_addr_BVALID,
        BREADY => m_axi_base_ddr_addr_BREADY,
        BRESP => m_axi_base_ddr_addr_BRESP,
        BID => m_axi_base_ddr_addr_BID,
        BUSER => m_axi_base_ddr_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => base_ddr_addr_ARVALID,
        I_ARREADY => base_ddr_addr_ARREADY,
        I_ARADDR => base_ddr_addr_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_200,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => base_ddr_addr_RVALID,
        I_RREADY => base_ddr_addr_RREADY,
        I_RDATA => base_ddr_addr_RDATA,
        I_RID => base_ddr_addr_RID,
        I_RUSER => base_ddr_addr_RUSER,
        I_RRESP => base_ddr_addr_RRESP,
        I_RLAST => base_ddr_addr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => base_ddr_addr_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => base_ddr_addr_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => base_ddr_addr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => base_ddr_addr_BRESP,
        I_BID => base_ddr_addr_BID,
        I_BUSER => base_ddr_addr_BUSER);

    buffer_U : component ddr_to_axis_readebkb
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        we1 => buffer_we1,
        d1 => base_ddr_addr_addr_r_reg_1435,
        q1 => buffer_q1);





    BASE_ADDRESS_r_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                BASE_ADDRESS_r <= ap_const_lv32_0;
            else
                if (((p_BASE_ADDRESS_flag_fu_557_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    BASE_ADDRESS_r <= tmp_7_base_address_fu_563_p3;
                end if; 
            end if;
        end if;
    end process;


    FRAME_BUFFER_DIM_r_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FRAME_BUFFER_DIM_r <= ap_const_lv32_0;
            else
                if (((p_FRAME_BUFFER_DIM_fl_fu_519_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    FRAME_BUFFER_DIM_r <= frame_buffer_dim;
                end if; 
            end if;
        end if;
    end process;


    FRAME_BUFFER_NUMBER_r_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FRAME_BUFFER_NUMBER_r <= ap_const_lv8_0;
            else
                if (((p_FRAME_BUFFER_NUMBER_fu_539_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
                end if; 
            end if;
        end if;
    end process;


    FRAME_OFFSET_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FRAME_OFFSET <= ap_const_lv32_0;
            else
                if (((p_FRAME_OFFSET_flag_fu_533_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    FRAME_OFFSET <= frame_buffer_offset;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((stereo_enabler_read_reg_1363 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((stereo_enabler_read_reg_1363 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((stereo_enabler_read_reg_1363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state17)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state17);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((stereo_enabler_read_reg_1363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_base_ddr_addr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
            else
                if (((exitcond1_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    if ((ap_const_boolean_1 = ap_condition_473)) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_condition_1458)) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    inner_index_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inner_index <= ap_const_lv32_0;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    inner_index <= storemerge_fu_678_p3;
                end if; 
            end if;
        end if;
    end process;


    luma_chroma_switch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                luma_chroma_switch <= ap_const_lv32_0;
            else
                if ((ap_const_boolean_1 = ap_condition_544)) then
                    if ((tmp_16_fu_721_p2 = ap_const_lv1_1)) then 
                        luma_chroma_switch <= ap_const_lv32_0;
                    elsif ((tmp_16_fu_721_p2 = ap_const_lv1_0)) then 
                        luma_chroma_switch <= tmp_18_fu_727_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    outStream_channel_1_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_channel_1_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_channel_1_V_1_ack_out = ap_const_logic_1) and (outStream_channel_1_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_channel_1_V_1_sel_rd <= not(outStream_channel_1_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_channel_1_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_channel_1_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_channel_1_V_1_ack_in = ap_const_logic_1) and (outStream_channel_1_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_channel_1_V_1_sel_wr <= not(outStream_channel_1_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_channel_1_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_channel_1_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_channel_1_V_1_state = ap_const_lv2_2) and (outStream_channel_1_V_1_vld_in = ap_const_logic_0)) or ((outStream_channel_1_V_1_state = ap_const_lv2_3) and (outStream_channel_1_V_1_vld_in = ap_const_logic_0) and (outStream_channel_1_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_channel_1_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_channel_1_V_1_state = ap_const_lv2_1) and (outStream_channel_1_V_1_ack_out = ap_const_logic_0)) or ((outStream_channel_1_V_1_state = ap_const_lv2_3) and (outStream_channel_1_V_1_ack_out = ap_const_logic_0) and (outStream_channel_1_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_channel_1_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_channel_1_V_1_vld_in = ap_const_logic_0) and (outStream_channel_1_V_1_ack_out = ap_const_logic_1))) and not(((outStream_channel_1_V_1_ack_out = ap_const_logic_0) and (outStream_channel_1_V_1_vld_in = ap_const_logic_1))) and (outStream_channel_1_V_1_state = ap_const_lv2_3)) or ((outStream_channel_1_V_1_state = ap_const_lv2_1) and (outStream_channel_1_V_1_ack_out = ap_const_logic_1)) or ((outStream_channel_1_V_1_state = ap_const_lv2_2) and (outStream_channel_1_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_channel_1_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_channel_1_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_channel_2_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_channel_2_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_channel_2_V_1_ack_out = ap_const_logic_1) and (outstream_channel_2_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_channel_2_V_1_sel_rd <= not(outstream_channel_2_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_channel_2_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_channel_2_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outstream_channel_2_V_1_ack_in = ap_const_logic_1) and (outstream_channel_2_V_1_vld_in = ap_const_logic_1))) then 
                                        outstream_channel_2_V_1_sel_wr <= not(outstream_channel_2_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outstream_channel_2_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_channel_2_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_channel_2_V_1_state = ap_const_lv2_2) and (outstream_channel_2_V_1_vld_in = ap_const_logic_0)) or ((outstream_channel_2_V_1_state = ap_const_lv2_3) and (outstream_channel_2_V_1_vld_in = ap_const_logic_0) and (outstream_channel_2_V_1_ack_out = ap_const_logic_1)))) then 
                    outstream_channel_2_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_channel_2_V_1_state = ap_const_lv2_1) and (outstream_channel_2_V_1_ack_out = ap_const_logic_0)) or ((outstream_channel_2_V_1_state = ap_const_lv2_3) and (outstream_channel_2_V_1_ack_out = ap_const_logic_0) and (outstream_channel_2_V_1_vld_in = ap_const_logic_1)))) then 
                    outstream_channel_2_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_channel_2_V_1_vld_in = ap_const_logic_0) and (outstream_channel_2_V_1_ack_out = ap_const_logic_1))) and not(((outstream_channel_2_V_1_ack_out = ap_const_logic_0) and (outstream_channel_2_V_1_vld_in = ap_const_logic_1))) and (outstream_channel_2_V_1_state = ap_const_lv2_3)) or ((outstream_channel_2_V_1_state = ap_const_lv2_1) and (outstream_channel_2_V_1_ack_out = ap_const_logic_1)) or ((outstream_channel_2_V_1_state = ap_const_lv2_2) and (outstream_channel_2_V_1_vld_in = ap_const_logic_1)))) then 
                    outstream_channel_2_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_channel_2_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_reg_386 <= i_1_reg_1415;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_386 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    indvar_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_1426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_397 <= indvar_next_reg_1430;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_397 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((stereo_enabler_read_reg_1363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j1_reg_430 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_fu_1082_p3 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j1_reg_430 <= j_2_fu_1119_p2;
            end if; 
        end if;
    end process;

    j_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((stereo_enabler_read_reg_1363 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_reg_409 <= ap_const_lv13_0;
            elsif (((tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_reg_409 <= j_4_fu_838_p2;
            end if; 
        end if;
    end process;

    offset1_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                offset1_reg_376 <= offset_1_fu_1076_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                offset1_reg_376 <= offset_fu_607_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_1426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                base_ddr_addr_addr_r_reg_1435 <= base_ddr_addr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_1426 <= exitcond_fu_692_p2;
                exitcond_reg_1426_pp0_iter1_reg <= exitcond_reg_1426;
                indvar_reg_397_pp0_iter1_reg <= indvar_reg_397;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_d_5_load_fu_460_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                guard_variable_for_d <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_d_6_load_fu_475_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                guard_variable_for_d_1 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_d_4_load_fu_445_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                guard_variable_for_d_2 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_d_7_load_fu_490_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                guard_variable_for_d_3 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_1415 <= i_1_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_1430 <= indvar_next_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                inner_index_load_reg_1367 <= inner_index;
                stereo_enabler_read_reg_1363 <= (0=>stereo_enabler, others=>'-');
                    tmp_1_FRAME_BUFFER_N_1_reg_1394(7 downto 0) <= tmp_1_FRAME_BUFFER_N_1_fu_553_p1(7 downto 0);
                tmp_5_reg_1407 <= frame_buffer_dim_FRA_fu_525_p3(31 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_channel_1_V_1_load_A = ap_const_logic_1)) then
                outStream_channel_1_V_1_payload_A <= outStream_channel_1_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_channel_1_V_1_load_B = ap_const_logic_1)) then
                outStream_channel_1_V_1_payload_B <= outStream_channel_1_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outstream_channel_2_V_1_load_A = ap_const_logic_1)) then
                outstream_channel_2_V_1_payload_A <= tmp_50_fu_1358_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outstream_channel_2_V_1_load_B = ap_const_logic_1)) then
                outstream_channel_2_V_1_payload_B <= tmp_50_fu_1358_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_fu_1082_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_11_reg_1492 <= tmp_11_fu_1090_p1;
                tmp_13_reg_1503 <= j1_reg_430(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_16_reg_1444 <= tmp_16_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_16_reg_1444_pp1_iter1_reg <= tmp_16_reg_1444;
                tmp_6_reg_1440 <= j_reg_409(12 downto 12);
                tmp_6_reg_1440_pp1_iter1_reg <= tmp_6_reg_1440;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_721_p2 = ap_const_lv1_1) and (tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_51_reg_1458 <= tmp_51_fu_771_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_721_p2 = ap_const_lv1_0) and (tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_70_reg_1448 <= tmp_70_fu_739_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_reg_1488 <= j1_reg_430(12 downto 12);
                tmp_reg_1488_pp2_iter1_reg <= tmp_reg_1488;
            end if;
        end if;
    end process;
    tmp_1_FRAME_BUFFER_N_1_reg_1394(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_CS_fsm_state2, exitcond1_fu_647_p2, ap_enable_reg_pp0_iter1, stereo_enabler_read_reg_1363, ap_block_state2_io, exitcond_fu_692_p2, ap_enable_reg_pp0_iter0, tmp_6_fu_709_p3, ap_enable_reg_pp1_iter0, tmp_fu_1082_p3, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_CS_fsm_state12, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or (outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_692_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_692_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((stereo_enabler_read_reg_1363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (tmp_6_fu_709_p3 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (tmp_6_fu_709_p3 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (tmp_fu_1082_p3 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (tmp_fu_1082_p3 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    addrCmp1_fu_805_p2 <= "1" when (unsigned(mem_index_gep_fu_789_p2) < unsigned(ap_const_lv14_204)) else "0";
    addrCmp_fu_799_p2 <= "1" when (unsigned(tmp_52_fu_775_p4) < unsigned(ap_const_lv10_3FC)) else "0";
    adjSize55_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep_fu_789_p2),15));
        adjSize_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_fu_775_p4),14));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1426, base_ddr_addr_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_1426 = ap_const_lv1_0) and (base_ddr_addr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1426, base_ddr_addr_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_1426 = ap_const_lv1_0) and (base_ddr_addr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state18_io, ap_block_state19_io)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state18_io, ap_block_state19_io)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond_reg_1426, base_ddr_addr_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((exitcond_reg_1426 = ap_const_lv1_0) and (base_ddr_addr_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(outStream_channel_1_V_1_ack_in, ap_predicate_op207_write_state14, ap_predicate_op228_write_state14)
    begin
                ap_block_state14_io <= (((ap_predicate_op228_write_state14 = ap_const_boolean_1) and (outStream_channel_1_V_1_ack_in = ap_const_logic_0)) or ((ap_predicate_op207_write_state14 = ap_const_boolean_1) and (outStream_channel_1_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(outStream_channel_1_V_1_ack_in, ap_predicate_op229_write_state15, ap_predicate_op230_write_state15)
    begin
                ap_block_state15_io <= (((ap_predicate_op230_write_state15 = ap_const_boolean_1) and (outStream_channel_1_V_1_ack_in = ap_const_logic_0)) or ((ap_predicate_op229_write_state15 = ap_const_boolean_1) and (outStream_channel_1_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, tmp_reg_1488)
    begin
                ap_block_state18_io <= (((tmp_reg_1488 = ap_const_lv1_0) and (outstream_channel_2_V_1_ack_in = ap_const_logic_0)) or ((tmp_reg_1488 = ap_const_lv1_0) and (outStream_channel_1_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state18_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, tmp_reg_1488_pp2_iter1_reg)
    begin
                ap_block_state19_io <= (((tmp_reg_1488_pp2_iter1_reg = ap_const_lv1_0) and (outstream_channel_2_V_1_ack_in = ap_const_logic_0)) or ((tmp_reg_1488_pp2_iter1_reg = ap_const_lv1_0) and (outStream_channel_1_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state19_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in)
    begin
                ap_block_state2 <= ((outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(exitcond1_fu_647_p2, ap_sig_ioackin_base_ddr_addr_ARREADY)
    begin
                ap_block_state2_io <= ((exitcond1_fu_647_p2 = ap_const_lv1_0) and (ap_sig_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1458_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, base_ddr_addr_ARREADY)
    begin
                ap_condition_1458 <= (not(((outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (base_ddr_addr_ARREADY = ap_const_logic_1));
    end process;


    ap_condition_473_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, ap_block_state2_io)
    begin
                ap_condition_473 <= not(((ap_const_boolean_1 = ap_block_state2_io) or (outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_condition_544_assign_proc : process(ap_CS_fsm_pp1_stage0, tmp_6_fu_709_p3, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
                ap_condition_544 <= ((tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_782_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, tmp_6_fu_709_p3, ap_enable_reg_pp1_iter0)
    begin
                ap_condition_782 <= ((tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond_fu_692_p2)
    begin
        if ((exitcond_fu_692_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(tmp_6_fu_709_p3)
    begin
        if ((tmp_6_fu_709_p3 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state17_assign_proc : process(tmp_fu_1082_p3)
    begin
        if ((tmp_fu_1082_p3 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, ap_CS_fsm_state2, exitcond1_fu_647_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4_assign_proc : process(ap_CS_fsm_state1, guard_variable_for_d_7_load_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_7_load_fu_490_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 <= ap_const_lv1_0;
            elsif ((guard_variable_for_d_7_load_fu_490_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 <= "X";
            end if;
        else 
            ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4_assign_proc : process(ap_CS_fsm_state1, base_address, BASE_ADDRESS_r, guard_variable_for_d_7_load_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_7_load_fu_490_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 <= BASE_ADDRESS_r;
            elsif ((guard_variable_for_d_7_load_fu_490_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 <= base_address;
            else 
                ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4_assign_proc : process(ap_CS_fsm_state1, guard_variable_for_d_4_load_fu_445_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_4_load_fu_445_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 <= ap_const_lv1_0;
            elsif ((guard_variable_for_d_4_load_fu_445_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 <= "X";
            end if;
        else 
            ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4_assign_proc : process(ap_CS_fsm_state1, frame_buffer_dim, FRAME_BUFFER_DIM_r, guard_variable_for_d_4_load_fu_445_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_4_load_fu_445_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 <= FRAME_BUFFER_DIM_r;
            elsif ((guard_variable_for_d_4_load_fu_445_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 <= frame_buffer_dim;
            else 
                ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4_assign_proc : process(ap_CS_fsm_state1, guard_variable_for_d_6_load_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_6_load_fu_475_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 <= ap_const_lv1_0;
            elsif ((guard_variable_for_d_6_load_fu_475_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 <= "X";
            end if;
        else 
            ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4_assign_proc : process(ap_CS_fsm_state1, frame_buffer_number, FRAME_BUFFER_NUMBER_r, guard_variable_for_d_6_load_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_6_load_fu_475_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 <= FRAME_BUFFER_NUMBER_r;
            elsif ((guard_variable_for_d_6_load_fu_475_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 <= frame_buffer_number;
            else 
                ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4_assign_proc : process(ap_CS_fsm_state1, guard_variable_for_d_5_load_fu_460_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_5_load_fu_460_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 <= ap_const_lv1_0;
            elsif ((guard_variable_for_d_5_load_fu_460_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 <= "X";
            end if;
        else 
            ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4_assign_proc : process(ap_CS_fsm_state1, frame_buffer_offset, FRAME_OFFSET, guard_variable_for_d_5_load_fu_460_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((guard_variable_for_d_5_load_fu_460_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 <= FRAME_OFFSET;
            elsif ((guard_variable_for_d_5_load_fu_460_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 <= frame_buffer_offset;
            else 
                ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_401_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1426, indvar_reg_397, indvar_next_reg_1430)
    begin
        if (((exitcond_reg_1426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_401_p4 <= indvar_next_reg_1430;
        else 
            ap_phi_mux_indvar_phi_fu_401_p4 <= indvar_reg_397;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_423_p4_assign_proc : process(j_reg_409, tmp_16_fu_721_p2, j_3_fu_764_p2, ap_phi_reg_pp1_iter0_j_1_reg_420, ap_condition_782)
    begin
        if ((ap_const_boolean_1 = ap_condition_782)) then
            if ((tmp_16_fu_721_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_j_1_phi_fu_423_p4 <= j_reg_409;
            elsif ((tmp_16_fu_721_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_j_1_phi_fu_423_p4 <= j_3_fu_764_p2;
            else 
                ap_phi_mux_j_1_phi_fu_423_p4 <= ap_phi_reg_pp1_iter0_j_1_reg_420;
            end if;
        else 
            ap_phi_mux_j_1_phi_fu_423_p4 <= ap_phi_reg_pp1_iter0_j_1_reg_420;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_j_1_reg_420 <= "XXXXXXXXXXXXX";

    ap_predicate_op207_write_state14_assign_proc : process(tmp_6_reg_1440, tmp_16_reg_1444)
    begin
                ap_predicate_op207_write_state14 <= ((tmp_16_reg_1444 = ap_const_lv1_0) and (tmp_6_reg_1440 = ap_const_lv1_0));
    end process;


    ap_predicate_op228_write_state14_assign_proc : process(tmp_6_reg_1440, tmp_16_reg_1444)
    begin
                ap_predicate_op228_write_state14 <= ((tmp_16_reg_1444 = ap_const_lv1_1) and (tmp_6_reg_1440 = ap_const_lv1_0));
    end process;


    ap_predicate_op229_write_state15_assign_proc : process(tmp_6_reg_1440_pp1_iter1_reg, tmp_16_reg_1444_pp1_iter1_reg)
    begin
                ap_predicate_op229_write_state15 <= ((tmp_16_reg_1444_pp1_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1440_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op230_write_state15_assign_proc : process(tmp_6_reg_1440_pp1_iter1_reg, tmp_16_reg_1444_pp1_iter1_reg)
    begin
                ap_predicate_op230_write_state15 <= ((tmp_16_reg_1444_pp1_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1440_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, ap_CS_fsm_state2, exitcond1_fu_647_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_base_ddr_addr_ARREADY_assign_proc : process(base_ddr_addr_ARREADY, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if ((ap_reg_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= base_ddr_addr_ARREADY;
        else 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    base_ddr_addr_ARADDR <= tmp_1_fu_658_p1(32 - 1 downto 0);

    base_ddr_addr_ARVALID_assign_proc : process(outStream_channel_1_V_1_ack_in, outstream_channel_2_V_1_ack_in, ap_CS_fsm_state2, exitcond1_fu_647_p2, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if ((not(((outStream_channel_1_V_1_ack_in = ap_const_logic_0) or (outstream_channel_2_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_647_p2 = ap_const_lv1_0) and (ap_reg_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            base_ddr_addr_ARVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1426, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_1426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            base_ddr_addr_RREADY <= ap_const_logic_1;
        else 
            base_ddr_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_blk_n_AR_assign_proc : process(m_axi_base_ddr_addr_ARREADY, ap_CS_fsm_state2, exitcond1_fu_647_p2)
    begin
        if (((exitcond1_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            base_ddr_addr_blk_n_AR <= m_axi_base_ddr_addr_ARREADY;
        else 
            base_ddr_addr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    base_ddr_addr_blk_n_R_assign_proc : process(m_axi_base_ddr_addr_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1426)
    begin
        if (((exitcond_reg_1426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            base_ddr_addr_blk_n_R <= m_axi_base_ddr_addr_RVALID;
        else 
            base_ddr_addr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, tmp_6_fu_709_p3, tmp_16_fu_721_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, gepindex264_cast_fu_753_p1, gepindex2_cast_fu_833_p1, gepindex276_cast_fu_1104_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            buffer_address0 <= gepindex276_cast_fu_1104_p1(9 - 1 downto 0);
        elsif (((tmp_16_fu_721_p2 = ap_const_lv1_1) and (tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            buffer_address0 <= gepindex2_cast_fu_833_p1(9 - 1 downto 0);
        elsif (((tmp_16_fu_721_p2 = ap_const_lv1_0) and (tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            buffer_address0 <= gepindex264_cast_fu_753_p1(9 - 1 downto 0);
        else 
            buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    buffer_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_block_pp0_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, indvar1_fu_704_p1, gepindex276_cast_fu_1104_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            buffer_address1 <= gepindex276_cast_fu_1104_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer_address1 <= indvar1_fu_704_p1(9 - 1 downto 0);
        else 
            buffer_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, tmp_6_fu_709_p3, ap_block_pp1_stage0_11001, tmp_16_fu_721_p2, ap_enable_reg_pp1_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((tmp_16_fu_721_p2 = ap_const_lv1_1) and (tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((tmp_16_fu_721_p2 = ap_const_lv1_0) and (tmp_6_fu_709_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            buffer_ce1 <= ap_const_logic_1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we1_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_1426_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((exitcond_reg_1426_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer_we1 <= ap_const_logic_1;
        else 
            buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    end_pos1_fu_1254_p2 <= (start_pos2_fu_1246_p3 or ap_const_lv6_7);
    end_pos2_fu_967_p2 <= (start_pos_fu_960_p3 or ap_const_lv6_7);
    end_pos3_fu_851_p2 <= (start_pos3_fu_844_p3 or ap_const_lv6_7);
    end_pos_fu_1132_p2 <= (start_pos1_fu_1125_p3 or ap_const_lv6_7);
    exitcond1_fu_647_p2 <= "1" when (i_reg_386 = tmp_5_reg_1407) else "0";
    exitcond_fu_692_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_401_p4 = ap_const_lv10_200) else "0";
    frame_buffer_dim_FRA_fu_525_p0 <= (0=>update_intr, others=>'-');
    frame_buffer_dim_FRA_fu_525_p3 <= 
        frame_buffer_dim when (frame_buffer_dim_FRA_fu_525_p0(0) = '1') else 
        ap_phi_mux_FRAME_BUFFER_DIM_loc_phi_fu_306_p4;
    frame_buffer_offset_s_fu_571_p0 <= (0=>update_intr, others=>'-');
    frame_buffer_offset_s_fu_571_p3 <= 
        frame_buffer_offset when (frame_buffer_offset_s_fu_571_p0(0) = '1') else 
        ap_phi_mux_FRAME_OFFSET_loc_phi_fu_327_p4;
    gepindex1_fu_817_p3 <= 
        gepindex_fu_811_p2 when (addrCmp_fu_799_p2(0) = '1') else 
        ap_const_lv15_1FF;
    gepindex264_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex62_cast_fu_743_p4),64));
    gepindex276_cast_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex74_cast_fu_1094_p4),64));
        gepindex2_cast_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex2_fu_825_p3),64));

    gepindex2_fu_825_p3 <= 
        gepindex1_fu_817_p3 when (addrCmp1_fu_805_p2(0) = '1') else 
        ap_const_lv15_1FF;
    gepindex62_cast_fu_743_p4 <= j_reg_409(11 downto 3);
    gepindex74_cast_fu_1094_p4 <= j1_reg_430(11 downto 3);
    gepindex_fu_811_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize55_cast_fu_795_p1));
    guard_variable_for_d_4_load_fu_445_p1 <= guard_variable_for_d_2;
    guard_variable_for_d_5_load_fu_460_p1 <= guard_variable_for_d;
    guard_variable_for_d_6_load_fu_475_p1 <= guard_variable_for_d_1;
    guard_variable_for_d_7_load_fu_490_p1 <= guard_variable_for_d_3;
    i_1_fu_652_p2 <= std_logic_vector(unsigned(i_reg_386) + unsigned(ap_const_lv20_1));
    indvar1_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_397_pp0_iter1_reg),64));
    indvar_next_fu_698_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_401_p4) + unsigned(ap_const_lv10_1));
    j_2_fu_1119_p2 <= std_logic_vector(unsigned(ap_const_lv13_2) + unsigned(j1_reg_430));
    j_3_fu_764_p2 <= std_logic_vector(signed(ap_const_lv13_1FFF) + signed(j_reg_409));
    j_4_fu_838_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_423_p4) + unsigned(ap_const_lv13_1));
    mem_index_gep_fu_789_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize_fu_785_p1));
    offset_1_fu_1076_p2 <= std_logic_vector(signed(offset1_reg_376) + signed(ap_const_lv32_200));
    offset_fu_607_p2 <= std_logic_vector(unsigned(tmp_9_fu_603_p1) + unsigned(tmp_7_BASE_ADDRESS_l_fu_579_p3));
    outStream_channel_1_V_1_ack_in <= outStream_channel_1_V_1_state(1);
    outStream_channel_1_V_1_ack_out <= outStream_channel_1_V_TREADY;

    outStream_channel_1_V_1_data_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_reg_1488, ap_predicate_op207_write_state14, ap_predicate_op228_write_state14, tmp_87_fu_955_p1, tmp_69_fu_1071_p1, tmp_33_fu_1236_p1, ap_block_pp1_stage0_01001, ap_block_pp2_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_01001) and (tmp_reg_1488 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            outStream_channel_1_V_1_data_in <= tmp_33_fu_1236_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_predicate_op228_write_state14 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            outStream_channel_1_V_1_data_in <= tmp_69_fu_1071_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_predicate_op207_write_state14 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            outStream_channel_1_V_1_data_in <= tmp_87_fu_955_p1;
        else 
            outStream_channel_1_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    outStream_channel_1_V_1_data_out_assign_proc : process(outStream_channel_1_V_1_payload_A, outStream_channel_1_V_1_payload_B, outStream_channel_1_V_1_sel)
    begin
        if ((outStream_channel_1_V_1_sel = ap_const_logic_1)) then 
            outStream_channel_1_V_1_data_out <= outStream_channel_1_V_1_payload_B;
        else 
            outStream_channel_1_V_1_data_out <= outStream_channel_1_V_1_payload_A;
        end if; 
    end process;

    outStream_channel_1_V_1_load_A <= (outStream_channel_1_V_1_state_cmp_full and not(outStream_channel_1_V_1_sel_wr));
    outStream_channel_1_V_1_load_B <= (outStream_channel_1_V_1_state_cmp_full and outStream_channel_1_V_1_sel_wr);
    outStream_channel_1_V_1_sel <= outStream_channel_1_V_1_sel_rd;
    outStream_channel_1_V_1_state_cmp_full <= '0' when (outStream_channel_1_V_1_state = ap_const_lv2_1) else '1';

    outStream_channel_1_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_reg_1488, ap_predicate_op207_write_state14, ap_predicate_op228_write_state14, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_reg_1488 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_predicate_op228_write_state14 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_predicate_op207_write_state14 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            outStream_channel_1_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_channel_1_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_channel_1_V_1_vld_out <= outStream_channel_1_V_1_state(0);
    outStream_channel_1_V_TDATA <= outStream_channel_1_V_1_data_out;

    outStream_channel_1_V_TDATA_blk_n_assign_proc : process(outStream_channel_1_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_6_reg_1440, tmp_16_reg_1444, ap_enable_reg_pp1_iter2, tmp_6_reg_1440_pp1_iter1_reg, tmp_16_reg_1444_pp1_iter1_reg, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, tmp_reg_1488, ap_enable_reg_pp2_iter2, tmp_reg_1488_pp2_iter1_reg)
    begin
        if ((((tmp_reg_1488_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((tmp_reg_1488 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((tmp_16_reg_1444_pp1_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1440_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((tmp_16_reg_1444_pp1_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1440_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((tmp_16_reg_1444 = ap_const_lv1_0) and (tmp_6_reg_1440 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((tmp_16_reg_1444 = ap_const_lv1_1) and (tmp_6_reg_1440 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            outStream_channel_1_V_TDATA_blk_n <= outStream_channel_1_V_1_state(1);
        else 
            outStream_channel_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_channel_1_V_TVALID <= outStream_channel_1_V_1_state(0);
    outstream_channel_2_V_1_ack_in <= outstream_channel_2_V_1_state(1);
    outstream_channel_2_V_1_ack_out <= outstream_channel_2_V_TREADY;

    outstream_channel_2_V_1_data_out_assign_proc : process(outstream_channel_2_V_1_payload_A, outstream_channel_2_V_1_payload_B, outstream_channel_2_V_1_sel)
    begin
        if ((outstream_channel_2_V_1_sel = ap_const_logic_1)) then 
            outstream_channel_2_V_1_data_out <= outstream_channel_2_V_1_payload_B;
        else 
            outstream_channel_2_V_1_data_out <= outstream_channel_2_V_1_payload_A;
        end if; 
    end process;

    outstream_channel_2_V_1_load_A <= (outstream_channel_2_V_1_state_cmp_full and not(outstream_channel_2_V_1_sel_wr));
    outstream_channel_2_V_1_load_B <= (outstream_channel_2_V_1_state_cmp_full and outstream_channel_2_V_1_sel_wr);
    outstream_channel_2_V_1_sel <= outstream_channel_2_V_1_sel_rd;
    outstream_channel_2_V_1_state_cmp_full <= '0' when (outstream_channel_2_V_1_state = ap_const_lv2_1) else '1';

    outstream_channel_2_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_reg_1488, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_reg_1488 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            outstream_channel_2_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_channel_2_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_channel_2_V_1_vld_out <= outstream_channel_2_V_1_state(0);
    outstream_channel_2_V_TDATA <= outstream_channel_2_V_1_data_out;

    outstream_channel_2_V_TDATA_blk_n_assign_proc : process(outstream_channel_2_V_1_state, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, tmp_reg_1488, ap_enable_reg_pp2_iter2, tmp_reg_1488_pp2_iter1_reg)
    begin
        if ((((tmp_reg_1488_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((tmp_reg_1488 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            outstream_channel_2_V_TDATA_blk_n <= outstream_channel_2_V_1_state(1);
        else 
            outstream_channel_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outstream_channel_2_V_TVALID <= outstream_channel_2_V_1_state(0);
    p_BASE_ADDRESS_flag_fu_557_p1 <= (0=>update_intr, others=>'-');
    p_BASE_ADDRESS_flag_fu_557_p2 <= (p_BASE_ADDRESS_flag_fu_557_p1 or ap_phi_mux_BASE_ADDRESS_flag_phi_fu_358_p4);
    p_FRAME_BUFFER_DIM_fl_fu_519_p1 <= (0=>update_intr, others=>'-');
    p_FRAME_BUFFER_DIM_fl_fu_519_p2 <= (p_FRAME_BUFFER_DIM_fl_fu_519_p1 or ap_phi_mux_FRAME_BUFFER_DIM_fla_phi_fu_295_p4);
    p_FRAME_BUFFER_NUMBER_fu_539_p1 <= (0=>update_intr, others=>'-');
    p_FRAME_BUFFER_NUMBER_fu_539_p2 <= (p_FRAME_BUFFER_NUMBER_fu_539_p1 or ap_phi_mux_FRAME_BUFFER_NUMBER_1_phi_fu_337_p4);
    p_FRAME_OFFSET_flag_fu_533_p1 <= (0=>update_intr, others=>'-');
    p_FRAME_OFFSET_flag_fu_533_p2 <= (p_FRAME_OFFSET_flag_fu_533_p1 or ap_phi_mux_FRAME_OFFSET_flag_phi_fu_316_p4);
    start_pos1_fu_1125_p3 <= (tmp_13_reg_1503 & ap_const_lv4_0);
    start_pos2_fu_1246_p3 <= (tmp_12_fu_1241_p2 & ap_const_lv3_0);
    start_pos3_fu_844_p3 <= (tmp_70_reg_1448 & ap_const_lv3_0);
    start_pos_fu_960_p3 <= (tmp_51_reg_1458 & ap_const_lv3_0);
    storemerge_fu_678_p3 <= 
        ap_const_lv32_0 when (tmp_3_fu_669_p2(0) = '1') else 
        tmp_4_fu_673_p2;
    tmp_11_fu_1090_p1 <= j1_reg_430(3 - 1 downto 0);
    tmp_12_fu_1241_p2 <= (tmp_11_reg_1492 or ap_const_lv3_1);
    tmp_15_fu_1138_p2 <= "1" when (unsigned(start_pos1_fu_1125_p3) > unsigned(end_pos_fu_1132_p2)) else "0";
    tmp_16_fu_721_p2 <= "1" when (luma_chroma_switch = ap_const_lv32_1) else "0";
    tmp_17_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos1_fu_1125_p3),7));
    tmp_18_fu_727_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(luma_chroma_switch));
    tmp_19_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_1132_p2),7));
    tmp_1_FRAME_BUFFER_N_1_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_FRAME_BUFFER_N_fu_545_p3),32));
    tmp_1_FRAME_BUFFER_N_fu_545_p0 <= (0=>update_intr, others=>'-');
    tmp_1_FRAME_BUFFER_N_fu_545_p3 <= 
        frame_buffer_number when (tmp_1_FRAME_BUFFER_N_fu_545_p0(0) = '1') else 
        ap_phi_mux_FRAME_BUFFER_NUMBER_2_phi_fu_348_p4;
        tmp_1_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(offset1_reg_376),64));

    
    tmp_20_fu_1152_p4_proc : process(buffer_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_20_fu_1152_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_20_fu_1152_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_20_fu_1152_p4_i) := buffer_q0(64-1-tmp_20_fu_1152_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_1152_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_21_fu_1162_p2 <= std_logic_vector(unsigned(tmp_17_fu_1144_p1) - unsigned(tmp_19_fu_1148_p1));
    tmp_22_fu_1168_p2 <= (tmp_17_fu_1144_p1 xor ap_const_lv7_3F);
    tmp_23_fu_1174_p2 <= std_logic_vector(unsigned(tmp_19_fu_1148_p1) - unsigned(tmp_17_fu_1144_p1));
    tmp_24_fu_1180_p3 <= 
        tmp_21_fu_1162_p2 when (tmp_15_fu_1138_p2(0) = '1') else 
        tmp_23_fu_1174_p2;
    tmp_25_fu_1188_p3 <= 
        tmp_20_fu_1152_p4 when (tmp_15_fu_1138_p2(0) = '1') else 
        buffer_q0;
    tmp_26_fu_1196_p3 <= 
        tmp_22_fu_1168_p2 when (tmp_15_fu_1138_p2(0) = '1') else 
        tmp_17_fu_1144_p1;
    tmp_27_fu_1204_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_24_fu_1180_p3));
    tmp_28_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1196_p3),64));
    tmp_29_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1204_p2),64));
    tmp_2_fu_593_p4 <= tmp_s_fu_587_p2(31 downto 3);
    tmp_30_fu_1218_p2 <= std_logic_vector(shift_right(unsigned(tmp_25_fu_1188_p3),to_integer(unsigned('0' & tmp_28_fu_1210_p1(31-1 downto 0)))));
    tmp_31_fu_1224_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_29_fu_1214_p1(31-1 downto 0)))));
    tmp_32_fu_1230_p2 <= (tmp_31_fu_1224_p2 and tmp_30_fu_1218_p2);
    tmp_33_fu_1236_p1 <= tmp_32_fu_1230_p2(8 - 1 downto 0);
    tmp_34_fu_1260_p2 <= "1" when (unsigned(start_pos2_fu_1246_p3) > unsigned(end_pos1_fu_1254_p2)) else "0";
    tmp_35_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos2_fu_1246_p3),7));
    tmp_36_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos1_fu_1254_p2),7));
    
    tmp_37_fu_1274_p4_proc : process(buffer_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_37_fu_1274_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_37_fu_1274_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_37_fu_1274_p4_i) := buffer_q1(64-1-tmp_37_fu_1274_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_37_fu_1274_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_38_fu_1284_p2 <= std_logic_vector(unsigned(tmp_35_fu_1266_p1) - unsigned(tmp_36_fu_1270_p1));
    tmp_39_fu_1290_p2 <= (tmp_35_fu_1266_p1 xor ap_const_lv7_3F);
    tmp_3_fu_669_p2 <= "1" when (inner_index_load_reg_1367 = tmp_1_FRAME_BUFFER_N_1_reg_1394) else "0";
    tmp_40_fu_1296_p2 <= std_logic_vector(unsigned(tmp_36_fu_1270_p1) - unsigned(tmp_35_fu_1266_p1));
    tmp_41_fu_1302_p3 <= 
        tmp_38_fu_1284_p2 when (tmp_34_fu_1260_p2(0) = '1') else 
        tmp_40_fu_1296_p2;
    tmp_42_fu_1310_p3 <= 
        tmp_37_fu_1274_p4 when (tmp_34_fu_1260_p2(0) = '1') else 
        buffer_q1;
    tmp_43_fu_1318_p3 <= 
        tmp_39_fu_1290_p2 when (tmp_34_fu_1260_p2(0) = '1') else 
        tmp_35_fu_1266_p1;
    tmp_44_fu_1326_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_41_fu_1302_p3));
    tmp_45_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1318_p3),64));
    tmp_46_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1326_p2),64));
    tmp_47_fu_1340_p2 <= std_logic_vector(shift_right(unsigned(tmp_42_fu_1310_p3),to_integer(unsigned('0' & tmp_45_fu_1332_p1(31-1 downto 0)))));
    tmp_48_fu_1346_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_46_fu_1336_p1(31-1 downto 0)))));
    tmp_49_fu_1352_p2 <= (tmp_48_fu_1346_p2 and tmp_47_fu_1340_p2);
    tmp_4_fu_673_p2 <= std_logic_vector(signed(inner_index_load_reg_1367) + signed(ap_const_lv32_1));
    tmp_50_fu_1358_p1 <= tmp_49_fu_1352_p2(8 - 1 downto 0);
    tmp_51_fu_771_p1 <= j_3_fu_764_p2(3 - 1 downto 0);
    tmp_52_fu_775_p4 <= j_3_fu_764_p2(12 downto 3);
    tmp_53_fu_973_p2 <= "1" when (unsigned(start_pos_fu_960_p3) > unsigned(end_pos2_fu_967_p2)) else "0";
    tmp_54_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_960_p3),7));
    tmp_55_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos2_fu_967_p2),7));
    
    tmp_56_fu_987_p4_proc : process(buffer_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_56_fu_987_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_56_fu_987_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_56_fu_987_p4_i) := buffer_q0(64-1-tmp_56_fu_987_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_56_fu_987_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_57_fu_997_p2 <= std_logic_vector(unsigned(tmp_54_fu_979_p1) - unsigned(tmp_55_fu_983_p1));
    tmp_58_fu_1003_p2 <= (tmp_54_fu_979_p1 xor ap_const_lv7_3F);
    tmp_59_fu_1009_p2 <= std_logic_vector(unsigned(tmp_55_fu_983_p1) - unsigned(tmp_54_fu_979_p1));
    tmp_60_fu_1015_p3 <= 
        tmp_57_fu_997_p2 when (tmp_53_fu_973_p2(0) = '1') else 
        tmp_59_fu_1009_p2;
    tmp_61_fu_1023_p3 <= 
        tmp_56_fu_987_p4 when (tmp_53_fu_973_p2(0) = '1') else 
        buffer_q0;
    tmp_62_fu_1031_p3 <= 
        tmp_58_fu_1003_p2 when (tmp_53_fu_973_p2(0) = '1') else 
        tmp_54_fu_979_p1;
    tmp_63_fu_1039_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_60_fu_1015_p3));
    tmp_64_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_1031_p3),64));
    tmp_65_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_1039_p2),64));
    tmp_66_fu_1053_p2 <= std_logic_vector(shift_right(unsigned(tmp_61_fu_1023_p3),to_integer(unsigned('0' & tmp_64_fu_1045_p1(31-1 downto 0)))));
    tmp_67_fu_1059_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_65_fu_1049_p1(31-1 downto 0)))));
    tmp_68_fu_1065_p2 <= (tmp_67_fu_1059_p2 and tmp_66_fu_1053_p2);
    tmp_69_fu_1071_p1 <= tmp_68_fu_1065_p2(8 - 1 downto 0);
    tmp_6_fu_709_p3 <= j_reg_409(12 downto 12);
    tmp_70_fu_739_p1 <= j_reg_409(3 - 1 downto 0);
    tmp_71_fu_857_p2 <= "1" when (unsigned(start_pos3_fu_844_p3) > unsigned(end_pos3_fu_851_p2)) else "0";
    tmp_72_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos3_fu_844_p3),7));
    tmp_73_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos3_fu_851_p2),7));
    
    tmp_74_fu_871_p4_proc : process(buffer_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_74_fu_871_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_74_fu_871_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_74_fu_871_p4_i) := buffer_q0(64-1-tmp_74_fu_871_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_74_fu_871_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_75_fu_881_p2 <= std_logic_vector(unsigned(tmp_72_fu_863_p1) - unsigned(tmp_73_fu_867_p1));
    tmp_76_fu_887_p2 <= (tmp_72_fu_863_p1 xor ap_const_lv7_3F);
    tmp_77_fu_893_p2 <= std_logic_vector(unsigned(tmp_73_fu_867_p1) - unsigned(tmp_72_fu_863_p1));
    tmp_78_fu_899_p3 <= 
        tmp_75_fu_881_p2 when (tmp_71_fu_857_p2(0) = '1') else 
        tmp_77_fu_893_p2;
    tmp_79_fu_907_p3 <= 
        tmp_74_fu_871_p4 when (tmp_71_fu_857_p2(0) = '1') else 
        buffer_q0;
    tmp_7_BASE_ADDRESS_l_fu_579_p0 <= (0=>update_intr, others=>'-');
    tmp_7_BASE_ADDRESS_l_fu_579_p3 <= 
        tmp_8_fu_515_p1 when (tmp_7_BASE_ADDRESS_l_fu_579_p0(0) = '1') else 
        ap_phi_mux_BASE_ADDRESS_loc_phi_fu_369_p4;
    tmp_7_base_address_fu_563_p0 <= (0=>update_intr, others=>'-');
    tmp_7_base_address_fu_563_p3 <= 
        tmp_8_fu_515_p1 when (tmp_7_base_address_fu_563_p0(0) = '1') else 
        base_address;
    tmp_7_fu_505_p4 <= base_address(31 downto 3);
    tmp_80_fu_915_p3 <= 
        tmp_76_fu_887_p2 when (tmp_71_fu_857_p2(0) = '1') else 
        tmp_72_fu_863_p1;
    tmp_81_fu_923_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_78_fu_899_p3));
    tmp_82_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_915_p3),64));
    tmp_83_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_923_p2),64));
    tmp_84_fu_937_p2 <= std_logic_vector(shift_right(unsigned(tmp_79_fu_907_p3),to_integer(unsigned('0' & tmp_82_fu_929_p1(31-1 downto 0)))));
    tmp_85_fu_943_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_83_fu_933_p1(31-1 downto 0)))));
    tmp_86_fu_949_p2 <= (tmp_85_fu_943_p2 and tmp_84_fu_937_p2);
    tmp_87_fu_955_p1 <= tmp_86_fu_949_p2(8 - 1 downto 0);
    tmp_8_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_505_p4),32));
    tmp_9_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_593_p4),32));
    tmp_fu_1082_p3 <= j1_reg_430(12 downto 12);
    tmp_s_fu_587_p0 <= inner_index;
    tmp_s_fu_587_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_s_fu_587_p0) * signed(frame_buffer_offset_s_fu_571_p3))), 32));
end behav;
