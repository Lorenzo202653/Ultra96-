// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _axi_stream_to_vga_HH_
#define _axi_stream_to_vga_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct axi_stream_to_vga : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > selftest;
    sc_in< sc_lv<8> > inStream_V_V_TDATA;
    sc_in< sc_logic > inStream_V_V_TVALID;
    sc_out< sc_logic > inStream_V_V_TREADY;
    sc_out< sc_lv<4> > R_V;
    sc_out< sc_lv<4> > G_V;
    sc_out< sc_lv<4> > B_V;
    sc_out< sc_lv<1> > V_SYNC_V;
    sc_out< sc_lv<1> > H_SYNC_V;


    // Module declarations
    axi_stream_to_vga(sc_module_name name);
    SC_HAS_PROCESS(axi_stream_to_vga);

    ~axi_stream_to_vga();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > color_blinking_V;
    sc_signal< sc_logic > inStream_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_314_p2;
    sc_signal< sc_lv<1> > or_cond2_fu_447_p2;
    sc_signal< sc_lv<1> > selftest_read_read_fu_134_p2;
    sc_signal< sc_lv<1> > tmp_reg_559;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_568;
    sc_signal< sc_lv<1> > or_cond2_reg_588;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<19> > indvar_flatten_reg_192;
    sc_signal< sc_lv<10> > y_reg_203;
    sc_signal< sc_lv<10> > x_reg_214;
    sc_signal< sc_lv<4> > op2_V_read_assign_fu_262_p2;
    sc_signal< sc_lv<4> > op2_V_read_assign_reg_554;
    sc_signal< sc_lv<4> > tmp_6_i_fu_274_p2;
    sc_signal< sc_lv<4> > tmp_6_i_reg_563;
    sc_signal< bool > ap_predicate_op71_read_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<19> > indvar_flatten_next_fu_320_p2;
    sc_signal< sc_lv<19> > indvar_flatten_next_reg_572;
    sc_signal< sc_lv<10> > x_mid2_fu_332_p3;
    sc_signal< sc_lv<10> > x_mid2_reg_577;
    sc_signal< sc_lv<10> > y_mid2_fu_411_p3;
    sc_signal< sc_lv<10> > y_mid2_reg_583;
    sc_signal< sc_lv<10> > x_1_fu_509_p2;
    sc_signal< sc_lv<10> > x_1_reg_595;
    sc_signal< bool > ap_predicate_op101_read_state4;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_lv<19> > ap_phi_mux_indvar_flatten_phi_fu_196_p4;
    sc_signal< sc_lv<10> > ap_phi_mux_y_phi_fu_207_p4;
    sc_signal< sc_lv<10> > ap_phi_mux_x_phi_fu_218_p4;
    sc_signal< sc_lv<4> > R_temp_V_read_assign_fu_122;
    sc_signal< sc_lv<21> > tmp_2_i_fu_483_p4;
    sc_signal< sc_lv<4> > G_temp_V_read_assign_fu_126;
    sc_signal< bool > ap_predicate_op96_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<4> > B_temp_V_read_assign_fu_130;
    sc_signal< sc_lv<1> > not_mid2_fu_376_p3;
    sc_signal< sc_lv<1> > V_SYNC_V_preg;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > not_1_fu_498_p2;
    sc_signal< sc_lv<1> > H_SYNC_V_preg;
    sc_signal< bool > ap_block_pp0_stage2_01001;
    sc_signal< sc_lv<4> > R_V_preg;
    sc_signal< sc_lv<4> > G_V_preg;
    sc_signal< sc_lv<4> > B_V_preg;
    sc_signal< sc_lv<9> > tmp_4_fu_280_p4;
    sc_signal< sc_lv<1> > tmp_2_fu_296_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_302_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_326_p2;
    sc_signal< sc_lv<10> > y_coordinate_V_mid2_s_fu_340_p3;
    sc_signal< sc_lv<10> > y_s_fu_354_p2;
    sc_signal< sc_lv<9> > tmp_8_fu_360_p4;
    sc_signal< sc_lv<1> > icmp1_fu_370_p2;
    sc_signal< sc_lv<1> > icmp_fu_290_p2;
    sc_signal< sc_lv<1> > tmp_2_mid1_fu_385_p2;
    sc_signal< sc_lv<1> > tmp_3_mid1_fu_391_p2;
    sc_signal< sc_lv<1> > tmp2_mid1_fu_397_p2;
    sc_signal< sc_lv<1> > tmp2_fu_308_p2;
    sc_signal< sc_lv<11> > tmp_5_cast_fu_419_p1;
    sc_signal< sc_lv<1> > tmp_6_fu_429_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_435_p2;
    sc_signal< sc_lv<1> > tmp2_mid2_fu_403_p3;
    sc_signal< sc_lv<1> > tmp1_fu_441_p2;
    sc_signal< sc_lv<10> > y_coordinate_V_mid2_fu_348_p2;
    sc_signal< sc_lv<11> > p_Val2_s_fu_423_p2;
    sc_signal< sc_lv<1> > tmp_10_fu_471_p3;
    sc_signal< sc_lv<19> > tmp_1_i_fu_479_p1;
    sc_signal< sc_lv<1> > tmp_9_fu_463_p3;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_251;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage2;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<21> ap_const_lv21_3;
    static const sc_lv<21> ap_const_lv21_2;
    static const sc_lv<21> ap_const_lv21_1;
    static const sc_lv<21> ap_const_lv21_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<10> ap_const_lv10_22;
    static const sc_lv<10> ap_const_lv10_203;
    static const sc_lv<19> ap_const_lv19_668A0;
    static const sc_lv<19> ap_const_lv19_1;
    static const sc_lv<10> ap_const_lv10_320;
    static const sc_lv<10> ap_const_lv10_3DE;
    static const sc_lv<10> ap_const_lv10_3DD;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<11> ap_const_lv11_770;
    static const sc_lv<10> ap_const_lv10_8F;
    static const sc_lv<10> ap_const_lv10_310;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<10> ap_const_lv10_5F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_B_V();
    void thread_G_V();
    void thread_H_SYNC_V();
    void thread_R_V();
    void thread_V_SYNC_V();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_01001();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_condition_251();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_196_p4();
    void thread_ap_phi_mux_x_phi_fu_218_p4();
    void thread_ap_phi_mux_y_phi_fu_207_p4();
    void thread_ap_predicate_op101_read_state4();
    void thread_ap_predicate_op71_read_state2();
    void thread_ap_predicate_op96_read_state3();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond_flatten_fu_314_p2();
    void thread_icmp1_fu_370_p2();
    void thread_icmp_fu_290_p2();
    void thread_inStream_V_V_TDATA_blk_n();
    void thread_inStream_V_V_TREADY();
    void thread_indvar_flatten_next_fu_320_p2();
    void thread_not_1_fu_498_p2();
    void thread_not_mid2_fu_376_p3();
    void thread_op2_V_read_assign_fu_262_p2();
    void thread_or_cond2_fu_447_p2();
    void thread_p_Val2_s_fu_423_p2();
    void thread_selftest_read_read_fu_134_p2();
    void thread_tmp1_fu_441_p2();
    void thread_tmp2_fu_308_p2();
    void thread_tmp2_mid1_fu_397_p2();
    void thread_tmp2_mid2_fu_403_p3();
    void thread_tmp_10_fu_471_p3();
    void thread_tmp_1_i_fu_479_p1();
    void thread_tmp_2_fu_296_p2();
    void thread_tmp_2_i_fu_483_p4();
    void thread_tmp_2_mid1_fu_385_p2();
    void thread_tmp_3_fu_302_p2();
    void thread_tmp_3_mid1_fu_391_p2();
    void thread_tmp_4_fu_280_p4();
    void thread_tmp_5_cast_fu_419_p1();
    void thread_tmp_5_fu_326_p2();
    void thread_tmp_6_fu_429_p2();
    void thread_tmp_6_i_fu_274_p2();
    void thread_tmp_7_fu_435_p2();
    void thread_tmp_8_fu_360_p4();
    void thread_tmp_9_fu_463_p3();
    void thread_x_1_fu_509_p2();
    void thread_x_mid2_fu_332_p3();
    void thread_y_coordinate_V_mid2_fu_348_p2();
    void thread_y_coordinate_V_mid2_s_fu_340_p3();
    void thread_y_mid2_fu_411_p3();
    void thread_y_s_fu_354_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
