-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pattern_generator_cross is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    outputStream_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outputStream_V_TVALID : OUT STD_LOGIC;
    outputStream_V_TREADY : IN STD_LOGIC );
end;


architecture behav of pattern_generator_cross is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pattern_generator_cross,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.888000,HLS_SYN_LAT=368222,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=229,HLS_SYN_LUT=266}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_3E : STD_LOGIC_VECTOR (7 downto 0) := "00111110";
    constant ap_const_lv8_C1 : STD_LOGIC_VECTOR (7 downto 0) := "11000001";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal lineX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lineY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dirX : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dirY : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal lineX_load_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal lineY_load_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_139_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_304 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_41 : BOOLEAN;
    signal tmp_3_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_210_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_57 : BOOLEAN;
    signal exitcond_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_outputStream_V_TREADY : STD_LOGIC;
    signal y_reg_77 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_99 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal storemerge4_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_outputStream_V_TREADY : STD_LOGIC := '0';
    signal y_cast2_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast1_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_v_cast_cast_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge4_v_cast_cast_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_239 : BOOLEAN;
    signal ap_sig_bdd_209 : BOOLEAN;
    signal ap_sig_bdd_242 : BOOLEAN;
    signal ap_sig_bdd_245 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_outputStream_V_TREADY assign process. --
    ap_reg_ioackin_outputStream_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outputStream_V_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and not((((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY)) or ((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY) and not((ap_const_lv1_0 = or_cond7_fu_232_p2)))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and not((ap_const_lv1_0 = or_cond7_fu_232_p2)) and not((((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY)) or ((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY) and not((ap_const_lv1_0 = or_cond7_fu_232_p2)))))))) then 
                    ap_reg_ioackin_outputStream_V_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_1 = outputStream_V_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and not((ap_const_lv1_0 = or_cond7_fu_232_p2)) and (ap_const_logic_1 = outputStream_V_TREADY)))) then 
                    ap_reg_ioackin_outputStream_V_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- dirX assign process. --
    dirX_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dirX <= ap_const_lv1_0;
            else
                if (ap_sig_bdd_209) then
                    if (not((ap_const_lv1_0 = tmp_2_fu_156_p2))) then 
                        dirX <= ap_const_lv1_0;
                    elsif (ap_sig_bdd_239) then 
                        dirX <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- dirY assign process. --
    dirY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dirY <= ap_const_lv1_0;
            else
                if (ap_sig_bdd_209) then
                    if (not((ap_const_lv1_0 = tmp_8_fu_178_p2))) then 
                        dirY <= ap_const_lv1_0;
                    elsif (ap_sig_bdd_242) then 
                        dirY <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- lineX assign process. --
    lineX_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                lineX <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                    lineX <= storemerge_fu_249_p2;
                end if; 
            end if;
        end if;
    end process;


    -- lineY assign process. --
    lineY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                lineY <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                    lineY <= storemerge4_fu_273_p2;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_5_reg_110 assign process. --
    tmp_5_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_209) then
                if (not((ap_const_lv1_0 = tmp_8_fu_178_p2))) then 
                    tmp_5_reg_110 <= ap_const_lv32_0;
                elsif ((ap_const_lv1_0 = tmp_8_fu_178_p2)) then 
                    tmp_5_reg_110 <= lineY_load_reg_293;
                end if;
            end if; 
        end if;
    end process;

    -- tmp_7_reg_88 assign process. --
    tmp_7_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_209) then
                if (not((ap_const_lv1_0 = tmp_2_fu_156_p2))) then 
                    tmp_7_reg_88 <= ap_const_lv32_0;
                elsif ((ap_const_lv1_0 = tmp_2_fu_156_p2)) then 
                    tmp_7_reg_88 <= lineX_load_reg_285;
                end if;
            end if; 
        end if;
    end process;

    -- x_reg_99 assign process. --
    x_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_133_p2))) then 
                x_reg_99 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY)) or ((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY) and not((ap_const_lv1_0 = or_cond7_fu_232_p2))))))) then 
                x_reg_99 <= x_1_fu_210_p2;
            end if; 
        end if;
    end process;

    -- y_reg_77 assign process. --
    y_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY)) or ((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY) and not((ap_const_lv1_0 = or_cond7_fu_232_p2))))) and not((ap_const_lv1_0 = exitcond_fu_204_p2)))) then 
                y_reg_77 <= y_1_reg_304;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                y_reg_77 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                lineX_load_reg_285 <= lineX;
                lineY_load_reg_293 <= lineY;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_133_p2))) then
                tmp_3_reg_309 <= tmp_3_fu_145_p2;
                tmp_s_reg_314 <= tmp_s_fu_151_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                y_1_reg_304 <= y_1_fu_139_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond5_fu_133_p2, exitcond_fu_204_p2, or_cond_fu_222_p2, or_cond7_fu_232_p2, ap_sig_ioackin_outputStream_V_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_133_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((ap_const_lv1_0 = exitcond_fu_204_p2) and not((((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY)) or ((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY) and not((ap_const_lv1_0 = or_cond7_fu_232_p2))))))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY)) or ((ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_logic_0 = ap_sig_ioackin_outputStream_V_TREADY) and not((ap_const_lv1_0 = or_cond7_fu_232_p2))))) and not((ap_const_lv1_0 = exitcond_fu_204_p2)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_209 assign process. --
    ap_sig_bdd_209_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond5_fu_133_p2)
    begin
                ap_sig_bdd_209 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond5_fu_133_p2)));
    end process;


    -- ap_sig_bdd_239 assign process. --
    ap_sig_bdd_239_assign_proc : process(tmp_2_fu_156_p2, tmp_4_fu_161_p2)
    begin
                ap_sig_bdd_239 <= ((ap_const_lv1_0 = tmp_2_fu_156_p2) and not((ap_const_lv1_0 = tmp_4_fu_161_p2)));
    end process;


    -- ap_sig_bdd_242 assign process. --
    ap_sig_bdd_242_assign_proc : process(tmp_8_fu_178_p2, tmp_1_fu_183_p2)
    begin
                ap_sig_bdd_242 <= ((ap_const_lv1_0 = tmp_8_fu_178_p2) and not((ap_const_lv1_0 = tmp_1_fu_183_p2)));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_204_p2, or_cond_fu_222_p2)
    begin
                ap_sig_bdd_245 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_41 assign process. --
    ap_sig_bdd_41_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_41 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_57 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_41)
    begin
        if (ap_sig_bdd_41) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_57)
    begin
        if (ap_sig_bdd_57) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_outputStream_V_TREADY assign process. --
    ap_sig_ioackin_outputStream_V_TREADY_assign_proc : process(outputStream_V_TREADY, ap_reg_ioackin_outputStream_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outputStream_V_TREADY)) then 
            ap_sig_ioackin_outputStream_V_TREADY <= outputStream_V_TREADY;
        else 
            ap_sig_ioackin_outputStream_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond5_fu_133_p2 <= "1" when (y_reg_77 = ap_const_lv9_1FE) else "0";
    exitcond_fu_204_p2 <= "1" when (x_reg_99 = ap_const_lv10_2D0) else "0";
    or_cond7_fu_232_p2 <= (tmp_9_fu_227_p2 or tmp_s_reg_314);
    or_cond_fu_222_p2 <= (tmp_3_reg_309 and tmp_6_fu_216_p2);

    -- outputStream_V_TDATA assign process. --
    outputStream_V_TDATA_assign_proc : process(or_cond7_fu_232_p2, ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then
            if (not((ap_const_lv1_0 = or_cond7_fu_232_p2))) then 
                outputStream_V_TDATA <= ap_const_lv8_C1;
            elsif ((ap_const_lv1_0 = or_cond7_fu_232_p2)) then 
                outputStream_V_TDATA <= ap_const_lv8_3E;
            else 
                outputStream_V_TDATA <= "XXXXXXXX";
            end if;
        else 
            outputStream_V_TDATA <= "XXXXXXXX";
        end if; 
    end process;


    -- outputStream_V_TVALID assign process. --
    outputStream_V_TVALID_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_204_p2, or_cond_fu_222_p2, or_cond7_fu_232_p2, ap_reg_ioackin_outputStream_V_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and (ap_const_lv1_0 = or_cond7_fu_232_p2) and (ap_const_logic_0 = ap_reg_ioackin_outputStream_V_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_204_p2) and not((ap_const_lv1_0 = or_cond_fu_222_p2)) and not((ap_const_lv1_0 = or_cond7_fu_232_p2)) and (ap_const_logic_0 = ap_reg_ioackin_outputStream_V_TREADY)))) then 
            outputStream_V_TVALID <= ap_const_logic_1;
        else 
            outputStream_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    storemerge4_fu_273_p2 <= std_logic_vector(unsigned(tmp_5_reg_110) + unsigned(storemerge4_v_cast_cast_fu_265_p3));
    storemerge4_v_cast_cast_fu_265_p3 <= 
        ap_const_lv32_FFFFFFFF when (dirY(0) = '1') else 
        ap_const_lv32_1;
    storemerge_fu_249_p2 <= std_logic_vector(unsigned(tmp_7_reg_88) + unsigned(storemerge_v_cast_cast_fu_241_p3));
    storemerge_v_cast_cast_fu_241_p3 <= 
        ap_const_lv32_FFFFFFFF when (dirX(0) = '1') else 
        ap_const_lv32_1;
    tmp_1_fu_183_p2 <= "1" when (lineY_load_reg_293 = ap_const_lv32_1DF) else "0";
    tmp_2_fu_156_p2 <= "1" when (lineX_load_reg_285 = ap_const_lv32_0) else "0";
    tmp_3_fu_145_p2 <= "1" when (unsigned(y_reg_77) < unsigned(ap_const_lv9_1E0)) else "0";
    tmp_4_fu_161_p2 <= "1" when (lineX_load_reg_285 = ap_const_lv32_27F) else "0";
    tmp_6_fu_216_p2 <= "1" when (unsigned(x_reg_99) < unsigned(ap_const_lv10_280)) else "0";
    tmp_8_fu_178_p2 <= "1" when (lineY_load_reg_293 = ap_const_lv32_0) else "0";
    tmp_9_fu_227_p2 <= "1" when (x_cast1_fu_200_p1 = lineX_load_reg_285) else "0";
    tmp_s_fu_151_p2 <= "1" when (y_cast2_fu_129_p1 = lineY_load_reg_293) else "0";
    x_1_fu_210_p2 <= std_logic_vector(unsigned(x_reg_99) + unsigned(ap_const_lv10_1));
    x_cast1_fu_200_p1 <= std_logic_vector(resize(unsigned(x_reg_99),32));
    y_1_fu_139_p2 <= std_logic_vector(unsigned(y_reg_77) + unsigned(ap_const_lv9_1));
    y_cast2_fu_129_p1 <= std_logic_vector(resize(unsigned(y_reg_77),32));
end behav;
